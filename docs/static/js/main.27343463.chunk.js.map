{"version":3,"sources":["modules/Post/Post.module.css","modules/Header/Header.module.css","modules/Comments/Comments.module.css","modules/SideMenu/SideMenu.module.css","modules/SideMenu/subcomponents/Subreddit/Subreddit.module.css","modules/App/App.module.css","modules/Post/subcomponents/Link/Link.module.css","modules/Post/subcomponents/Image/Image.module.css","modules/Post/subcomponents/Video/Video.module.css","modules/Posts/Posts.module.css","modules/SideMenu/subcomponents/Search/Search.module.css","modules/Post/subcomponents/Text/Text.module.css","store/reducers/postReducer.js","store/reducers/postsReducer.js","store/reducers/subredditReducer.js","store/reducers/rootReducer.js","lib/utils.js","lib/post.js","lib/subreddit.js","store/actions/subredditAction.js","store/actions/postsAction.js","modules/Header/Header.js","modules/Header/index.js","modules/SideMenu/subcomponents/Subreddit/Subreddit.js","modules/SideMenu/subcomponents/Subreddit/index.js","modules/SideMenu/subcomponents/Search/Search.js","modules/SideMenu/subcomponents/Search/index.js","modules/SideMenu/subcomponents/Subreddits/Subreddits.js","modules/SideMenu/subcomponents/Subreddits/index.js","modules/SideMenu/SideMenu.js","modules/SideMenu/index.js","modules/Post/subcomponents/Image/index.js","modules/Post/subcomponents/Image/Image.js","modules/Post/subcomponents/Text/index.js","modules/Post/subcomponents/Text/Text.js","modules/Post/subcomponents/Link/index.js","modules/Post/subcomponents/Link/Link.js","modules/Post/subcomponents/Video/index.js","modules/Post/subcomponents/Video/Video.js","modules/Comments/Comments.js","modules/Comments/index.js","modules/Post/Post.js","store/actions/postAction.js","modules/Post/index.js","modules/Posts/Posts.js","modules/Posts/index.js","modules/App/App.js","modules/App/index.js","index.js","store/store.js"],"names":["module","exports","INITIAL_STATE","byID","current","subscribed","subscribed_map","search_list","data","combineReducers","comments","state","action","type","payload","id","posts","list_append","list","concat","subreddits","forEach","subreddit","subreddit_data","name","copy","obj","JSON","parse","stringify","UUID","replace","c","r","Math","random","toString","unescapeHTML","string","txt","document","createElement","innerHTML","value","GET","url","parser","Promise","resolve","reject","fetch","then","response","json","e","console","log","error","cleanPost","author","kind","children","post","title","empty","content","media","score_display","s","score","floor","toFixed","submitted_at","date","time_diff","Date","getTime","created_utc","awards","all_awardings","map","award","toLowerCase","count","key","parsePostData","is_self","isText","post_hint","indexOf","match","is_video","is_reddit_media_domain","isVideo","isImage","image","body","selftext","body_html","selftext_html","parseSubreddit","description","public_description","display_name","banner","banner_img","icon","icon_img","subscribers","display","full","full_data","subs","fetchSubredditData","dispatch","action_data","fetchPosts","opts","getState","limit","after","subreddit_current","is_current_subreddit","URL","Boolean","item","Header","searchCollection","props","join","onClick","currentTarget","dataset","listing","onSearch","search_string","this","className","subreddits_data","classnames","styles","listings","main_links","data-listing","search_label","search","spellCheck","onKeyDown","placeholder","subreddit_icon","src","alt","subreddit_title","Component","mapDispatchToProps","connect","Subreddit","onSubscribe","checked","subscribeSubreddit","onChange","checkbox","task","push","filter","current_subreddit","SearchSubreddits","searchSubreddits","clearTimeout","search_timer","setTimeout","side_menu_styles","section","section_title","onKeyUp","sort","a","b","a_match","b_match","sortSubreddits","subreddits_list","parseSubreddits","defaultProps","Search","Subreddits","Sidemenu","sidemenu","SideMenu","Image","is_media_max","media_max","setState","Text","dangerouslySetInnerHTML","__html","Link","link","href","target","rel","link_address","Video","ref_media","React","createRef","iframe","getElementsByTagName","iframe_ratio","width","height","clientWidth","secure_media","secure_media_embed","reddit_video","controls","fallback_url","ref","Comments","length","comment","even","comment_even","comment_odd","replies","renderComments","wrapper","Post","is_media_expanded","is_comments_expanded","load_comments","fetchPost","fa_icon","body_classname","body_empty","bar","thumbnail","style","backgroundImage","renderIcon","submission","subreddit_link","num_comments","content_wrapper","hide","renderMedia","comments_wrapper","article","article_data","comment_data","cleanComments","parent","even_layer","parsed_comment","marked","reply","Posts","load_more","App","header","articleList","sideMenu","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","getElementById"],"mappings":"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","file":"static/js/main.27343463.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1ZCkS\",\"bar\":\"Post_bar__2ytou\",\"score\":\"Post_score__3J9Go\",\"thumbnail\":\"Post_thumbnail__2Mv8T\",\"body\":\"Post_body__1tjlH\",\"body_empty\":\"Post_body_empty__1ZIC6\",\"title\":\"Post_title__1sUIr\",\"icon\":\"Post_icon__2-AFI\",\"submission\":\"Post_submission__2PLyZ\",\"comments\":\"Post_comments__1eQ7f\",\"load_comments\":\"Post_load_comments__3QYMw\",\"comments_wrapper\":\"Post_comments_wrapper__14RNb\",\"content_wrapper\":\"Post_content_wrapper__3IKz1\",\"hide\":\"Post_hide__q3vp2\",\"subreddit_link\":\"Post_subreddit_link__3RnEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_links\":\"Header_main_links__3lpuR\",\"listing\":\"Header_listing__3drQY\",\"search_label\":\"Header_search_label__1_-nu\",\"search\":\"Header_search__1zI1g\",\"subreddit_current\":\"Header_subreddit_current__3kx1v\",\"subreddit_icon\":\"Header_subreddit_icon__2OO0L\",\"subreddit_title\":\"Header_subreddit_title__zjJCE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Comments_wrapper__h6tw3\",\"comments\":\"Comments_comments__3NgER\",\"comment_even\":\"Comments_comment_even__2U9nK\",\"comment_odd\":\"Comments_comment_odd__3wItb\",\"comment\":\"Comments_comment__3MfqI\",\"author\":\"Comments_author__3MjnA\",\"score\":\"Comments_score__1gShr\",\"body\":\"Comments_body__1B94B\",\"award\":\"Comments_award__yjfLH\",\"gold\":\"Comments_gold__6PfTT\",\"silver\":\"Comments_silver__3ggsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidemenu\":\"SideMenu_sidemenu__2GrsV\",\"title\":\"SideMenu_title__rRgxI\",\"section\":\"SideMenu_section__3Wl6k\",\"section_title\":\"SideMenu_section_title__3EIq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subreddit\":\"Subreddit_subreddit__2lgPg\",\"checkbox\":\"Subreddit_checkbox__2UDbU\",\"title\":\"Subreddit_title__3_NX6\",\"subscribers\":\"Subreddit_subscribers__2uqEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2CBHV\",\"header\":\"App_header__SZGgc\",\"articleList\":\"App_articleList__1F2Yd\",\"sideMenu\":\"App_sideMenu__3EQTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Link_content__10cBw\",\"link\":\"Link_link__2vhKr\",\"link_address\":\"Link_link_address__15p7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Image_media__2V2Pq\",\"media_max\":\"Image_media_max__99lxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Video_media__2ghAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Posts_wrapper__11-4S\",\"load_more\":\"Posts_load_more__1Ku_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__19ult\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Text_content__1lINs\"};","const INITIAL_STATE = {\r\n    byID: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'post': {\r\n            const { byID = {} } = state;\r\n            byID[action.payload.data.id] = action.payload.comments;\r\n            return { byID };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    current: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'posts': {\r\n            if (action.payload.list_append) {\r\n                return {\r\n                    ...state,\r\n                    current: {\r\n                        ...state.current,\r\n                        list_append: true,\r\n                        list: state.current.list.concat(action.payload.list),\r\n                    },\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                current: action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    subscribed: [],\r\n    subscribed_map: {},\r\n    search_list: [],\r\n    data: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'subscribe_subreddit':\r\n            let subscribed_map = {};\r\n            (action.payload || []).forEach((subreddit) => {\r\n                subscribed_map[subreddit.id] = subreddit;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                subscribed: action.payload,\r\n                subscribed_map: subscribed_map\r\n            };\r\n\r\n        case 'subreddit_data': {\r\n            const data = state.data;\r\n            const subreddit_data = action.payload;\r\n            data[subreddit_data.name] = subreddit_data;\r\n\r\n            return {\r\n                ...state,\r\n                data,\r\n            };\r\n        }\r\n\r\n        case 'search_subreddits': {\r\n            // Subreddits from the search have icon and banner data and can be\r\n            // added to the data map\r\n            const data = state.data;\r\n            const search_list = action.payload;\r\n\r\n            search_list.forEach((subreddit_data) => {\r\n                data[subreddit_data.name] = subreddit_data;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                search_list,\r\n                data,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\nimport postsReducer from './postsReducer';\r\nimport subredditReducer from './subredditReducer';\r\n\r\nexport default combineReducers({\r\n    comments: postReducer,\r\n    posts: postsReducer,\r\n    subreddits: subredditReducer\r\n});\r\n","export function copy (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function UUID () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = (c === 'x') ? r : ((r & 0x3) | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function unescapeHTML (string) {\r\n    const txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = string;\r\n    return txt.value;\r\n}\r\n\r\nexport function GET (url, parser) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            fetch(url).then(response => response.json()).then((response) => {\r\n                try {\r\n                    resolve(parser(response));\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    });\r\n}\r\n","import marked from 'marked';\r\nimport {\r\n    UUID,\r\n    unescapeHTML,\r\n} from './utils';\r\n\r\n/*\r\n    Caveats I have noticed from looking at reddit post json:\r\n        title:\r\n            Not everything will have a title, like some askreddit threads.\r\n        url: multipurpose, link to an image or an article or a video\r\n            Type needs to be figured out by looking at a couple of other fields\r\n*/\r\n\r\nfunction parsePostData (data) {\r\n    return {\r\n        ...data,\r\n\r\n        title: (data.title || '').replace(/&amp;/g, '&'),\r\n        empty: false, // Mainly used for text to know if there is body content\r\n        type: 'none',\r\n        content: {},\r\n        media: {},\r\n\r\n        score_display: ((s) => {\r\n            if (s > 100000) return Math.floor(s / 1000) + 'K';\r\n            if (s > 10000) return (s / 1000).toFixed(1) + 'K';\r\n            return s;\r\n        })(data.score),\r\n\r\n        submitted_at: ((date) => { // date is in seconds\r\n            let time_diff = (new Date()).getTime() - (new Date( date * 1000)).getTime();\r\n            time_diff = time_diff / 1000 / 60; // milli -> sec -> min\r\n            // TODO: Should probably add \"days\" as a possibility\r\n            if (time_diff > 60) return Math.floor(time_diff / 60) + ' hours';\r\n            return Math.floor(time_diff) + ' minutes';\r\n        })(data.created_utc),\r\n\r\n        awards: (data.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                // React component key, award.id is not unique enough\r\n                key: `${award.id}-${UUID()}`,\r\n            };\r\n        })\r\n    };\r\n}\r\n\r\nfunction isText (data) {\r\n    return data.is_self;\r\n}\r\n\r\nfunction isImage (data) {\r\n    // Check the post_hint for a tip\r\n    if (data.post_hint && data.post_hint.indexOf('image') !== -1) return true;\r\n    // Do a basic check on the extension of the url\r\n    if (data.url && data.url.match(/.jpg|.jpeg|.png|.bmp|.gif/)) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isVideo (data) {\r\n    // Check the post_hint\r\n    if (data.post_hint && data.post_hint.indexOf('video') !== -1) return true;\r\n\r\n    if (data.url && data.url.match(/.gifv/)) return true;\r\n\r\n    // Do a basic check on the common video fields\r\n    if (data.url && data.is_video && data.is_reddit_media_domain) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nexport function cleanPost (data) {\r\n    try {\r\n        if (!data.author && data.kind) {\r\n            data = data.data.children[0].data;\r\n        }\r\n\r\n        let post = parsePostData(data);\r\n\r\n        if (isText(data)) {\r\n            post.type = 'text';\r\n            post.content.body = data.selftext;\r\n            post.content.body_html = data.selftext_html;\r\n            if (!post.content.body && !post.content.body_html) {\r\n                post.empty = true;\r\n            }\r\n        } else if (isVideo(data)) {\r\n            post.type = 'video';\r\n            // post.media.video = data.secure_media || data.media;\r\n        } else if (isImage(data)) {\r\n            post.type = 'image';\r\n            post.media.image = data.url;\r\n        } else if (data.url) {\r\n            post.type = 'link';\r\n        }\r\n\r\n        return post;\r\n    } catch (e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function cleanComments (comment, parent, even_layer) {\r\n    if (!comment.body) return;\r\n\r\n    let parsed_comment = {\r\n        id: comment.id,\r\n        key: `${comment.id}_${UUID()}`,\r\n        author: comment.author,\r\n        body: marked(unescapeHTML(comment.body)),\r\n        score: comment.score,\r\n        awards: (comment.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                key: `${award.id}-${UUID()}`\r\n            };\r\n        }),\r\n        even: even_layer\r\n    };\r\n    parent.push(parsed_comment);\r\n\r\n    if (comment.replies && comment.replies.data.children) {\r\n        parsed_comment.replies = [];\r\n        comment.replies.data.children.forEach((reply) => {\r\n            cleanComments(reply.data, parsed_comment.replies, !even_layer);\r\n        });\r\n    }\r\n}\r\n","export function parseSubreddit (data) {\r\n    let subreddit = {\r\n        id: data.name,\r\n        // key: data.display_name.toLowerCase() + '_' + (new Date()).getTime(),\r\n        description: data.public_description,\r\n        name: data.display_name.toLowerCase(),\r\n        display_name: data.display_name,\r\n        url: data.url,\r\n        banner: data.banner_img,\r\n        icon: data.icon_img,\r\n        subscribers: {\r\n            display: data.subscribers,\r\n            full: data.subscribers\r\n        },\r\n        full_data: data,\r\n    };\r\n\r\n    const subs = subreddit.subscribers.full;\r\n    if (subs > 1000000) {\r\n        subreddit.subscribers.display = (subs / 100000).toFixed(1) + 'M';\r\n    } else if (subs > 100000) {\r\n        subreddit.subscribers.display = Math.floor(subs / 1000) + 'K';\r\n    } else if (subs > 10000) {\r\n        subreddit.subscribers.display = (subs / 1000).toFixed(1) + 'K';\r\n    }\r\n\r\n    return subreddit;\r\n}\r\n\r\nexport function parseSubreddits (subreddits_list = []) {\r\n    return subreddits_list.map((item) => {\r\n        const { data = {} } = item;\r\n        return parseSubreddit(data);\r\n    });\r\n};\r\n\r\nexport function sortSubreddits (subreddits, search_string) {\r\n    subreddits.sort((a, b) => {\r\n        let a_match = a.name.indexOf(search_string) !== -1;\r\n        let b_match = b.name.indexOf(search_string) !== -1;\r\n\r\n        if (a_match && b_match) {\r\n            // they both match the search string, the one with more subscribers is first\r\n            return b.subscribers.full - a.subscribers.full;\r\n        } else if (a_match) {\r\n            return -1; // negative puts a first\r\n        } else if (b_match) {\r\n            return 1; // positive puts b first\r\n        } else {\r\n            return b.subscribers.full - a.subscribers.full;\r\n        }\r\n    });\r\n    return subreddits;\r\n}\r\n","import {\r\n    GET,\r\n    copy\r\n} from '../../lib/utils';\r\n\r\nimport {\r\n    parseSubreddit,\r\n    parseSubreddits,\r\n    sortSubreddits,\r\n} from '../../lib/subreddit';\r\n\r\nconst SHOW_MATURE = false;\r\n\r\nexport const searchSubreddits = (search_string) => (dispatch) => {\r\n    let URL = `https://www.reddit.com/subreddits/search.json?q=${search_string}`;\r\n    if (SHOW_MATURE) URL += '&include_over_18=on';\r\n    GET(URL, (response) => {\r\n        return sortSubreddits(parseSubreddits(response.data.children), search_string);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'search_subreddits',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const fetchSubredditData = (subreddit) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${subreddit.name}/about.json`;\r\n    GET(URL, (response) => {\r\n        return parseSubreddit(response.data);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'subreddit_data',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const subscribeSubreddit = (subreddit, task) => (dispatch, getState) => {\r\n    let subreddits = copy((getState().subreddits || {}).subscribed || []);\r\n\r\n    if (task === 'add') {\r\n        subreddits.push(subreddit);\r\n    }\r\n    if (task === 'remove') {\r\n        subreddits = subreddits.filter((current_subreddit) => {\r\n            return current_subreddit.id !== subreddit.id;\r\n        });\r\n    }\r\n\r\n    dispatch({\r\n        type: 'subscribe_subreddit',\r\n        payload: subreddits\r\n    });\r\n}\r\n","import { GET, copy } from '../../lib/utils';\r\nimport { cleanPost } from '../../lib/post';\r\n\r\nimport { fetchSubredditData } from './subredditAction';\r\n\r\n/*\r\n    /r/pics+gifs+todayilearned/new.json\r\n        ?count=count of before/after post\r\n        ?limit=number of posts wanted in return\r\n        ?after=post.id\r\n        ?before=post.id\r\n*/\r\n\r\nexport const fetchPosts = (subreddit, opts = {}) => (dispatch, getState) => {\r\n    const {\r\n        limit = 25,\r\n        count,\r\n        after,\r\n    } = opts;\r\n\r\n    subreddit.name = subreddit.name || subreddit.title.toLowerCase();\r\n    subreddit.type = subreddit.type || 'subreddit';\r\n\r\n    const subreddit_current = copy(getState().posts.current.subreddit || {});\r\n    const is_current_subreddit = subreddit_current && subreddit_current.name === subreddit.name;\r\n\r\n    if (subreddit.type === 'subreddit') {\r\n        const subreddits_data = copy((getState().subreddits || {}).data || {});\r\n        const subreddit_data = subreddits_data[subreddit.name];\r\n        if (!subreddit_data) {\r\n            dispatch(fetchSubredditData(subreddit));\r\n        } else {\r\n            subreddit = subreddit_data;\r\n        }\r\n    }\r\n\r\n    let URL = `https://www.reddit.com/${subreddit.url}.json?limit=${limit}`;\r\n    if (count) URL += `&count=${count}`;\r\n    if (after) URL += `&after=${after}`;\r\n\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            subreddit,\r\n            list_append: (is_current_subreddit && Boolean(after)),\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            }),\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport styles from './Header.module.css';\r\n\r\nclass Header extends Component {\r\n    searchCollection = (e) => {\r\n        const {\r\n            subscribed,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        fetchPosts({\r\n            title: 'Subscribed',\r\n            type: 'listing',\r\n            url: '/r/' + subscribed.map(s => s.name).join('+'),\r\n        });\r\n    }\r\n\r\n    onClick = (e) => {\r\n        this.props.fetchPosts({\r\n            title: e.currentTarget.dataset.listing,\r\n            type: 'listing',\r\n            url: e.currentTarget.dataset.listing\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        if (e.key.toLowerCase() !== 'enter') return;\r\n        const search_string = e.currentTarget.value;\r\n        this.props.fetchPosts({\r\n            title: search_string,\r\n            type: 'subreddit',\r\n            url: '/r/' + search_string,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            className,\r\n            posts = {},\r\n            subreddits_data,\r\n        } = this.props;\r\n        const {\r\n            title,\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        const subreddit_data = subreddits_data[subreddit.name] || {};\r\n\r\n        return (\r\n            <header className={classnames(styles.listings, className)}>\r\n                <div className={styles.main_links}>\r\n                    <span onClick={this.onClick} data-listing=\"best\" className={styles.listing}>Best</span>\r\n                    <span onClick={this.onClick} data-listing=\"top\" className={styles.listing}>Top</span>\r\n                    <span onClick={this.onClick} data-listing=\"new\" className={styles.listing}>New</span>\r\n                    <span onClick={this.onClick} data-listing=\"hot\" className={styles.listing}>Hot</span>\r\n                    <span onClick={this.searchCollection} data-listing=\"subscribed\" className={styles.listing}>Subscribed</span>\r\n                    <span className={styles.search_label}>/r/</span>\r\n                    <input className={styles.search} spellCheck=\"false\" onKeyDown={this.onSearch} placeholder=\"subreddit\"/>\r\n                </div>\r\n                <div className={styles.subreddit_current}>\r\n                    {subreddit_data.icon && <img className={styles.subreddit_icon} src={subreddit_data.icon} alt=\"Subreddit Icon\" />}\r\n                    <span className={styles.subreddit_title}>{title || ''}</span>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits_data: state.subreddits.data,\r\n        subscribed: state.subreddits.subscribed || [],\r\n        posts: state.posts.current,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../../../store/actions/postsAction';\r\nimport { subscribeSubreddit } from '../../../../store/actions/subredditAction';\r\n\r\nimport styles from './Subreddit.module.css';\r\n\r\nclass Subreddit extends Component {\r\n    onClick = (e) => {\r\n        this.props.fetchPosts(this.props.subreddit);\r\n    }\r\n\r\n    onSubscribe = (e) => {\r\n        const checked = e.currentTarget.checked;\r\n        this.props.subscribeSubreddit(this.props.subreddit, checked ? 'add' : 'remove');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.subreddit}>\r\n                <input type=\"checkbox\" checked={this.props.checked} onChange={this.onSubscribe} className={styles.checkbox}></input>\r\n                <span onClick={this.onClick} className={styles.title}>{this.props.subreddit.display_name}</span>\r\n                <span className={styles.subscribers}>{this.props.subreddit.subscribers.display}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    subscribeSubreddit,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Subreddit);\r\n","import Subreddit from './Subreddit';\r\n\r\nexport default Subreddit;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { searchSubreddits } from '../../../../store/actions/subredditAction';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass SearchSubreddits extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.search_timer = null;\r\n    }\r\n\r\n    search = (e) => {\r\n        const {\r\n            searchSubreddits,\r\n        } = this.props;\r\n\r\n        const search_string = e.currentTarget.value;\r\n        if (e.key.toLowerCase() !== 'enter') {\r\n            clearTimeout(this.search_timer);\r\n            this.search_timer = null;\r\n            this.search_timer = setTimeout(() => {\r\n                searchSubreddits(search_string);\r\n            }, 300);\r\n        } else {\r\n            searchSubreddits(search_string);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            search_list,\r\n            subscribed_map,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Search:</div>\r\n                <input className={styles.search} spellCheck=\"false\" onKeyUp={this.search} placeholder=\"subreddit name\"/>\r\n\r\n                {(search_list || []).map((subreddit) => {\r\n                    return (\r\n                        <Subreddit\r\n                            key={`search_${subreddit.id}`}\r\n                            checked={!!subscribed_map[subreddit.id]}\r\n                            subreddit={subreddit}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        search_list: state.subreddits.search_list,\r\n        subscribed_map: state.subreddits.subscribed_map,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    searchSubreddits,\r\n};\r\n\r\nSearchSubreddits.defaultProps = {\r\n    subreddits: [],\r\n    subscribed_map: {},\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSubreddits);\r\n","import Search from './Search';\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass Subreddits extends Component {\r\n    render() {\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Subscribed:</div>\r\n                {(this.props.subscribed || []).map((subreddit) => {\r\n                    return <Subreddit key={`subbed_${subreddit.id}`} checked={true} subreddit={subreddit} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Subreddits);\r\n","import Subreddits from './Subreddits';\r\n\r\nexport default Subreddits;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport Search from './subcomponents/Search';\r\nimport Subreddits from './subcomponents/Subreddits';\r\n\r\nimport styles from './SideMenu.module.css';\r\n\r\nclass Sidemenu extends Component {\r\n    render() {\r\n        const {\r\n            className\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={classnames(styles.sidemenu, className)}>\r\n                <div className={styles.title}>Subreddits</div>\r\n                <Subreddits subscribed={this.props.subscribed} />\r\n                <Search />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Sidemenu);","import SideMenu from './SideMenu';\r\n\r\nexport default SideMenu;","import Image from './Image';\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Image.module.css';\r\n\r\nclass Image extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n        };\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n        const {\r\n            is_media_max,\r\n        } = this.state;\r\n\r\n        return (\r\n            <img\r\n                alt=\"Parse for text\"\r\n                className={classnames(styles.media, {\r\n                    [styles.media_max]: is_media_max,\r\n                })}\r\n                src={post.media.image}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        )\r\n    };\r\n}\r\n\r\nexport default Image;\r\n","import Text from './Text';\r\n\r\nexport default Text;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Text.module.css';\r\n\r\nclass Text extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={styles.content}\r\n                dangerouslySetInnerHTML={{ __html: unescapeHTML(post.content.body_html) }}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nexport default Text;\r\n","import Link from './Link';\r\n\r\nexport default Link;\r\n","import React, { Component } from 'react';\r\n\r\nimport styles from './Link.module.css';\r\n\r\nclass Link extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.content}>\r\n                <a className={styles.link} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">Go To Article</a>\r\n                <a className={styles.link_address} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.url}</a>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Link;\r\n","import Video from './Video';\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Video.module.css';\r\n\r\nclass Video extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref_media = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (!this.ref_media || !this.ref_media.current) return;\r\n\r\n        const iframe = this.ref_media.current.getElementsByTagName('iframe')[0];\r\n        const iframe_width = iframe.width;\r\n        const iframe_height = iframe.height;\r\n        const iframe_ratio = iframe_width / iframe_height;\r\n\r\n        iframe.width = this.ref_media.current.clientWidth;\r\n        iframe.height = this.ref_media.current.clientWidth / iframe_ratio;\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post = {},\r\n        } = this.props;\r\n        const {\r\n            secure_media = {},\r\n            secure_media_embed = {}\r\n        } = post;\r\n\r\n        // if (post.url) {\r\n        //     return (\r\n        //         <video\r\n        //             className={styles.media}\r\n        //             controls\r\n        //         >\r\n        //             <meta\r\n        //                 itemProp=\"embedURL\"\r\n        //                 content={post.url}\r\n        //             />\r\n        //         </video>\r\n        //     );\r\n        // }\r\n\r\n        if (secure_media.reddit_video) {\r\n            return (\r\n                <video\r\n                    className={styles.media}\r\n                    controls\r\n                    src={secure_media.reddit_video.fallback_url}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (secure_media_embed.content) {\r\n            return (\r\n                <div\r\n                    className={styles.media}\r\n                    dangerouslySetInnerHTML={{ __html: unescapeHTML(post.secure_media_embed.content) }}\r\n                    ref={this.ref_media}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Comments.module.css';\r\n\r\nclass Comments extends Component {\r\n    renderComments (comments) {\r\n        if (!comments || !comments.length) return;\r\n        return comments.map((comment) => {\r\n            return (\r\n                <div key={comment.key} className={`${styles.comment} ${comment.even ? styles.comment_even : styles.comment_odd}`}>\r\n                    <div className={styles.author}>\r\n                        <span>{comment.author}</span>\r\n                        <span className={styles.score}>{comment.score} points</span>\r\n                        {(comment.awards || []).map((award) => {\r\n                            if (award.name.match(/gold|silver/)) {\r\n                                return <div key={award.key} className={`${styles.award} ${styles[award.name]}`}>{award.count}</div>\r\n                            }\r\n                            return <div key={award.key} className={styles.award}>{award.name}</div>\r\n                        })}\r\n                    </div>\r\n                    <div\r\n                        className={styles.body}\r\n                        dangerouslySetInnerHTML={{ __html: comment.body }}\r\n                    />\r\n                    {((comment.replies || []).length > 0) &&\r\n                        <div className={styles.comments}>{this.renderComments(comment.replies)}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {this.renderComments(this.props.comments)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, null)(Comments);\r\n","import Comments from './Comments';\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPost } from '../../store/actions/postAction';\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Image from './subcomponents/Image';\r\nimport Text from './subcomponents/Text';\r\nimport Link from './subcomponents/Link';\r\nimport Video from './subcomponents/Video';\r\n\r\nimport Comments from '../Comments';\r\n\r\nimport styles from './Post.module.css';\r\n\r\nclass Post extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_expanded: false,\r\n            is_media_max: false,\r\n            is_comments_expanded: false,\r\n        };\r\n    }\r\n\r\n    onClick = () => {\r\n        const {\r\n            is_media_expanded\r\n        } = this.state;\r\n\r\n        this.setState({\r\n            is_media_expanded: !is_media_expanded,\r\n        });\r\n    }\r\n\r\n    renderMedia (post) {\r\n        const {\r\n            is_media_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        switch (post.type) {\r\n            case 'video': return <Video post={post} />;\r\n            case 'image': return <Image post={post} />;\r\n            case 'text': return <Text post={post} />;\r\n            case 'link': return <Link post={post} />;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    renderComments (comments) {\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        if (!is_comments_expanded) {\r\n            return (\r\n                <div\r\n                    className={styles.load_comments}\r\n                    onClick={() => {\r\n                        this.setState({\r\n                            is_comments_expanded: !is_comments_expanded,\r\n                        });\r\n                        this.props.fetchPost(this.props.post);\r\n                    }}\r\n                >LOAD COMMENTS</div>\r\n            );\r\n        }\r\n\r\n        if (!comments || !comments.length) return null;\r\n        return <Comments comments={comments} />\r\n    }\r\n\r\n    renderIcon () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        let fa_icon = 'fa-question-circle';\r\n        switch (post.type) {\r\n            case 'text':\r\n                if (post.empty) {\r\n                    fa_icon = '';\r\n                } else {\r\n                    fa_icon = 'fas fa-align-left';\r\n                }\r\n                break;\r\n            case 'image':\r\n                fa_icon = 'far fa-image';\r\n                break;\r\n            case 'video':\r\n                fa_icon = 'fas fa-video';\r\n                break;\r\n            case 'link':\r\n                fa_icon = 'fas fa-external-link-alt';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return <i onClick={this.onClick} className={classnames(styles.icon, fa_icon)}></i>;\r\n    }\r\n\r\n    render () {\r\n        const data = this.props.post;\r\n        if (!data) return;\r\n\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded,\r\n        } = this.state;\r\n        const {\r\n            post,\r\n            comments,\r\n            fetchPost,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            subreddit,\r\n        } = data;\r\n\r\n        const body_classname = classnames(styles.body, {\r\n            [styles.body_empty]: post.empty,\r\n        });\r\n\r\n        return (\r\n            <div className={styles.post}>\r\n                <div className={styles.bar}>\r\n                    <div className={styles.score}>{data.score_display}</div>\r\n                    <div className={styles.thumbnail} style={{ backgroundImage: `url(\"${data.thumbnail || data.media.image}\")` }}></div>\r\n                    <div className={body_classname}>\r\n                        <div className={styles.title}>{data.title}</div>\r\n                        {this.renderIcon()}\r\n                        <div className={styles.submission}>\r\n                            {`Submitted ${data.submitted_at} ago by ${data.author} to `}\r\n                            <span className={styles.subreddit_link} onClick={() => {\r\n                                fetchPosts({\r\n                                    title: subreddit,\r\n                                    type: 'subreddit',\r\n                                    name: subreddit,\r\n                                    url: `/r/${subreddit}`,\r\n                                });\r\n                            }}>{data.subreddit}</span>\r\n                        </div>\r\n                        <div className={styles.comments} onClick={() => {\r\n                            fetchPost(post);\r\n                            this.setState({\r\n                                is_media_expanded: true,\r\n                                is_comments_expanded: true,\r\n                            });\r\n                        }}>{data.num_comments} comments</div>\r\n                    </div>\r\n                </div>\r\n                <div className={classnames(styles.content_wrapper, {[styles.hide]: !is_media_expanded})}>\r\n                    {this.renderMedia(data)}\r\n                </div>\r\n                <div className={classnames(styles.comments_wrapper, {[styles.hide]: !is_comments_expanded})}>\r\n                    {this.renderComments(comments.byID[data.id])}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPost,\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import { GET } from '../../lib/utils';\r\nimport {\r\n    cleanPost,\r\n    cleanComments\r\n } from '../../lib/post';\r\n\r\n /*\r\n    Fetching a full article requires the subreddit the article belongs to\r\n    and the\r\n\r\n    Sample URL: https://www.reddit.com/r/NintendoSwitch/comments/de98bj.json\r\n */\r\n\r\nexport const fetchPost = (article) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${article.subreddit}/comments/${article.id}.json`;\r\n    GET(URL, (response) => {\r\n        let [article_data, comment_data] = response;\r\n\r\n        let post = {\r\n            data: cleanPost(article_data),\r\n            comments: []\r\n        };\r\n\r\n        comment_data = comment_data.data.children;\r\n        comment_data.forEach((comment) => {\r\n            cleanComments(comment.data, post.comments, true);\r\n        });\r\n\r\n        return post;\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'post',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import Post from './Post';\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Post from '../Post';\r\n\r\nimport styles from './Posts.module.css';\r\n\r\nclass Posts extends Component {\r\n    render () {\r\n        const {\r\n            className,\r\n            posts,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            list = [],\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        // TODO : need detection for end of subreddit\r\n\r\n        return (\r\n            <div className={classnames(styles.wrapper, className)}>\r\n                {list.map((post) => {\r\n                    if (!post || !post.id) return null;\r\n                    return <Post key={post.id} post={post} />\r\n                })}\r\n                {list.length && <div className={styles.load_more} onClick={() => {\r\n                    fetchPosts(subreddit, {\r\n                        count: list.length,\r\n                        after: list[list.length - 1].name,\r\n                    });\r\n                }}>LOAD MORE</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.posts.current,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n","import Posts from './Posts';\r\n\r\nexport default Posts;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Header from '../Header';\r\nimport SideMenu from '../SideMenu';\r\nimport Posts from '../Posts';\r\n\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.fetchPosts({\r\n            title: 'best',\r\n            type: 'listing',\r\n            url: 'best'\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <Header className={styles.header} />\r\n                <Posts className={styles.articleList} />\r\n                <SideMenu className={styles.sideMenu} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport configureStore from './store/store';\r\n\r\nimport './index.css';\r\n\r\nimport App from './modules/App';\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// serviceWorker.register();","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}
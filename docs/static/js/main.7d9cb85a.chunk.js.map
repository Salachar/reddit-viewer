{"version":3,"sources":["modules/Post/Post.module.css","modules/Comments/Comments.module.css","modules/Header/Header.module.css","modules/SideMenu/SideMenu.module.css","modules/SideMenu/subcomponents/Subreddit/Subreddit.module.css","modules/App/App.module.css","modules/Post/subcomponents/Link/Link.module.css","modules/Post/subcomponents/Image/Image.module.css","modules/SideMenu/subcomponents/Search/Search.module.css","modules/Post/subcomponents/Text/Text.module.css","modules/Post/subcomponents/Video/Video.module.css","modules/Posts/Posts.module.css","store/reducers/postReducer.js","store/reducers/postsReducer.js","store/reducers/searchReducer.js","store/reducers/subredditReducer.js","store/reducers/rootReducer.js","lib/utils.js","lib/post.js","store/actions/postsAction.js","modules/Header/Header.js","modules/Header/index.js","modules/SideMenu/subcomponents/Subreddit/Subreddit.js","store/actions/subredditAction.js","modules/SideMenu/subcomponents/Subreddit/index.js","modules/SideMenu/subcomponents/Search/Search.js","store/actions/searchAction.js","modules/SideMenu/subcomponents/Search/index.js","modules/SideMenu/subcomponents/Subreddits/Subreddits.js","modules/SideMenu/subcomponents/Subreddits/index.js","modules/SideMenu/SideMenu.js","modules/SideMenu/index.js","modules/Post/subcomponents/Image/index.js","modules/Post/subcomponents/Image/Image.js","modules/Post/subcomponents/Text/index.js","modules/Post/subcomponents/Text/Text.js","modules/Post/subcomponents/Link/index.js","modules/Post/subcomponents/Link/Link.js","modules/Post/subcomponents/Video/index.js","modules/Post/subcomponents/Video/Video.js","modules/Comments/Comments.js","modules/Comments/index.js","modules/Post/Post.js","store/actions/postAction.js","modules/Post/index.js","modules/Posts/Posts.js","modules/Posts/index.js","modules/App/App.js","modules/App/index.js","index.js","store/store.js"],"names":["module","exports","INITIAL_STATE","byID","combineReducers","comments","state","action","type","payload","data","id","posts","search","subreddits","subscribed_map","forEach","subreddit","key","subscribed","UUID","replace","c","r","Math","random","toString","unescapeHTML","string","txt","document","createElement","innerHTML","value","GET","url","parser","Promise","resolve","reject","fetch","then","response","json","e","console","log","error","cleanPost","author","kind","children","post","title","content","media","score_display","s","score","floor","toFixed","submitted_at","date","time_diff","Date","getTime","created_utc","awards","all_awardings","map","award","name","toLowerCase","count","parsePostData","is_self","isText","post_hint","indexOf","is_video","is_reddit_media_domain","isVideo","match","isImage","image","body","selftext","body_html","selftext_html","fetchPosts","dispatch","list","item","action_data","Header","searchCollection","props","join","onClick","currentTarget","dataset","listing","onSearch","search_string","this","className","classnames","styles","listings","main_links","data-listing","search_label","spellCheck","onKeyDown","placeholder","selected","Component","mapDispatchToProps","connect","Subreddit","onSubscribe","checked","subscribeSubreddit","onChange","checkbox","subscribers","display","task","getState","obj","JSON","parse","stringify","push","filter","current_subreddit","SearchSubreddits","searchForSubreddits","side_menu_styles","section","section_title","display_name","description","public_description","name_lower","banner","banner_img","icon","icon_img","full","subs","sort","a","b","a_match","b_match","defaultProps","Search","Subreddits","Sidemenu","sidemenu","SideMenu","Image","is_media_max","alt","media_max","src","setState","Text","dangerouslySetInnerHTML","__html","Link","link","href","target","rel","link_address","Video","ref_media","React","createRef","current","iframe","getElementsByTagName","iframe_ratio","width","height","clientWidth","secure_media","secure_media_embed","reddit_video","controls","fallback_url","ref","Comments","length","comment","even","comment_even","comment_odd","replies","renderComments","wrapper","Post","is_media_expanded","is_comments_expanded","load_comments","fetchPost","fa_icon","bar","thumbnail","style","backgroundImage","renderIcon","submission","subreddit_link","num_comments","content_wrapper","hide","renderMedia","comments_wrapper","article","article_data","comment_data","cleanComments","parent","even_layer","parsed_comment","reply","Posts","App","header","articleList","sideMenu","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","getElementById"],"mappings":"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","file":"static/js/main.7d9cb85a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1ZCkS\",\"bar\":\"Post_bar__2ytou\",\"score\":\"Post_score__3J9Go\",\"thumbnail\":\"Post_thumbnail__2Mv8T\",\"body\":\"Post_body__1tjlH\",\"title\":\"Post_title__1sUIr\",\"icon\":\"Post_icon__2-AFI\",\"submission\":\"Post_submission__2PLyZ\",\"comments\":\"Post_comments__1eQ7f\",\"load_comments\":\"Post_load_comments__3QYMw\",\"comments_wrapper\":\"Post_comments_wrapper__14RNb\",\"content_wrapper\":\"Post_content_wrapper__3IKz1\",\"hide\":\"Post_hide__q3vp2\",\"subreddit_link\":\"Post_subreddit_link__3RnEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Comments_wrapper__h6tw3\",\"comments\":\"Comments_comments__3NgER\",\"comment_even\":\"Comments_comment_even__2U9nK\",\"comment_odd\":\"Comments_comment_odd__3wItb\",\"comment\":\"Comments_comment__3MfqI\",\"author\":\"Comments_author__3MjnA\",\"score\":\"Comments_score__1gShr\",\"body\":\"Comments_body__1B94B\",\"award\":\"Comments_award__yjfLH\",\"gold\":\"Comments_gold__6PfTT\",\"silver\":\"Comments_silver__3ggsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_links\":\"Header_main_links__3lpuR\",\"listing\":\"Header_listing__3drQY\",\"search_label\":\"Header_search_label__1_-nu\",\"search\":\"Header_search__1zI1g\",\"selected\":\"Header_selected__3dQdV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidemenu\":\"SideMenu_sidemenu__2GrsV\",\"title\":\"SideMenu_title__rRgxI\",\"section\":\"SideMenu_section__3Wl6k\",\"section_title\":\"SideMenu_section_title__3EIq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subreddit\":\"Subreddit_subreddit__2lgPg\",\"checkbox\":\"Subreddit_checkbox__2UDbU\",\"title\":\"Subreddit_title__3_NX6\",\"subscribers\":\"Subreddit_subscribers__2uqEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2CBHV\",\"header\":\"App_header__SZGgc\",\"articleList\":\"App_articleList__1F2Yd\",\"sideMenu\":\"App_sideMenu__3EQTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Link_content__10cBw\",\"link\":\"Link_link__2vhKr\",\"link_address\":\"Link_link_address__15p7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Image_media__2V2Pq\",\"media_max\":\"Image_media_max__99lxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__19ult\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Text_content__1lINs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Video_media__2ghAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Posts_wrapper__11-4S\"};","const INITIAL_STATE = {\r\n    byID: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'post': {\r\n            const { byID = {} } = state;\r\n            byID[action.payload.data.id] = action.payload.comments;\r\n            return { byID };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'posts':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'search_subreddits':\r\n            return {\r\n                subreddits: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'subscribe_subreddit':\r\n            let subscribed_map = {};\r\n            (action.payload || []).forEach((subreddit) => {\r\n                subscribed_map[subreddit.key] = subreddit;\r\n            })\r\n            return {\r\n                subscribed: action.payload,\r\n                subscribed_map: subscribed_map\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\nimport postsReducer from './postsReducer';\r\nimport searchReducer from './searchReducer';\r\nimport subredditReducer from './subredditReducer';\r\n\r\nexport default combineReducers({\r\n    comments: postReducer,\r\n    posts: postsReducer,\r\n    search: searchReducer,\r\n    subreddits: subredditReducer\r\n});\r\n","export function copy (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function UUID () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = (c === 'x') ? r : ((r & 0x3) | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function unescapeHTML (string) {\r\n    const txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = string;\r\n    return txt.value;\r\n}\r\n\r\nexport function GET (url, parser) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            fetch(url).then(response => response.json()).then((response) => {\r\n                try {\r\n                    resolve(parser(response));\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    });\r\n}\r\n","import {\r\n    UUID,\r\n    unescapeHTML,\r\n} from './utils';\r\n\r\n/*\r\n    Caveats I have noticed from looking at reddit post json:\r\n        title:\r\n            Not everything will have a title, like some askreddit threads.\r\n        url: multipurpose, link to an image or an article or a video\r\n            Type needs to be figured out by looking at a couple of other fields\r\n*/\r\n\r\nfunction parsePostData (data) {\r\n    return {\r\n        ...data,\r\n\r\n        title: (data.title || '').replace(/&amp;/g, '&'),\r\n        type: 'none',\r\n        content: {},\r\n        media: {},\r\n\r\n        score_display: ((s) => {\r\n            if (s > 100000) return Math.floor(s / 1000) + 'K';\r\n            if (s > 10000) return (s / 1000).toFixed(1) + 'K';\r\n            return s;\r\n        })(data.score),\r\n\r\n        submitted_at: ((date) => { // date is in seconds\r\n            let time_diff = (new Date()).getTime() - (new Date( date * 1000)).getTime();\r\n            time_diff = time_diff / 1000 / 60; // milli -> sec -> min\r\n            // TODO: Should probably add \"days\" as a possibility\r\n            if (time_diff > 60) return Math.floor(time_diff / 60) + ' hours';\r\n            return Math.floor(time_diff) + ' minutes';\r\n        })(data.created_utc),\r\n\r\n        awards: (data.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                // React component key, award.id is not unique enough\r\n                key: `${award.id}-${UUID()}`,\r\n            };\r\n        })\r\n    };\r\n}\r\n\r\nfunction isText (data) {\r\n    return data.is_self;\r\n}\r\n\r\nfunction isImage (data) {\r\n    // Check the post_hint for a tip\r\n    if (data.post_hint && data.post_hint.indexOf('image') !== -1) return true;\r\n    // Do a basic check on the extension of the url\r\n    if (data.url && data.url.match(/.jpg|.jpeg|.png|.bmp|.gif/)) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isVideo (data) {\r\n    // Check the post_hint\r\n    if (data.post_hint && data.post_hint.indexOf('video') !== -1) return true;\r\n    // Do a basic check on the common video fields\r\n    if (data.url && data.is_video && data.is_reddit_media_domain) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nexport function cleanPost (data) {\r\n    try {\r\n        if (!data.author && data.kind) {\r\n            data = data.data.children[0].data;\r\n        }\r\n\r\n        let post = parsePostData(data);\r\n\r\n        if (isText(data)) {\r\n            post.type = 'text';\r\n            post.content.body = data.selftext;\r\n            post.content.body_html = data.selftext_html;\r\n        } else if (isVideo(data)) {\r\n            post.type = 'video';\r\n            // post.media.video = data.secure_media || data.media;\r\n        } else if (isImage(data)) {\r\n            post.type = 'image';\r\n            post.media.image = data.url;\r\n        } else if (data.url) {\r\n            post.type = 'link';\r\n        }\r\n\r\n        return post;\r\n    } catch (e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function cleanComments (comment, parent, even_layer) {\r\n    if (!comment.body) return;\r\n\r\n    let parsed_comment = {\r\n        id: comment.id,\r\n        key: `${comment.id}_${UUID()}`,\r\n        author: comment.author,\r\n        body: unescapeHTML(comment.body),\r\n        score: comment.score,\r\n        awards: (comment.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                key: `${award.id}-${UUID()}`\r\n            };\r\n        }),\r\n        even: even_layer\r\n    };\r\n    parent.push(parsed_comment);\r\n\r\n    if (comment.replies && comment.replies.data.children) {\r\n        parsed_comment.replies = [];\r\n        comment.replies.data.children.forEach((reply) => {\r\n            cleanComments(reply.data, parsed_comment.replies, !even_layer);\r\n        });\r\n    }\r\n}\r\n","import { GET } from '../../lib/utils';\r\nimport { cleanPost } from '../../lib/post';\r\n\r\n/*\r\n    /r/pics+gifs+todayilearned/new.json\r\n*/\r\n\r\nexport const fetchPosts = (subreddit) => (dispatch) => {\r\n    console.log(subreddit);\r\n    if (typeof subreddit === 'string') {\r\n        subreddit = {\r\n            url: `/r/${subreddit}`,\r\n            title: subreddit,\r\n            name: subreddit,\r\n        };\r\n    }\r\n    const URL = `https://www.reddit.com/${subreddit.url}.json?limit=25`;\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            })\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport styles from './Header.module.css';\r\n\r\nclass Header extends Component {\r\n    searchCollection = (e) => {\r\n        const {\r\n            subscribed,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        fetchPosts({\r\n            title: 'Subscribed',\r\n            url: '/r/' + subscribed.map(s => s.name).join('+'),\r\n        });\r\n    }\r\n\r\n    onClick = (e) => {\r\n        this.props.fetchPosts({\r\n            title: e.currentTarget.dataset.listing,\r\n            url: e.currentTarget.dataset.listing\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        if (e.key.toLowerCase() !== 'enter') return;\r\n        const search_string = e.currentTarget.value;\r\n        this.props.fetchPosts({\r\n            title: search_string,\r\n            url: '/r/' + search_string,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            className,\r\n            posts = {},\r\n        } = this.props;\r\n\r\n        return (\r\n            <header className={classnames(styles.listings, className)}>\r\n                <div className={styles.main_links}>\r\n                    <span onClick={this.onClick} data-listing=\"best\" className={styles.listing}>Best</span>\r\n                    <span onClick={this.onClick} data-listing=\"top\" className={styles.listing}>Top</span>\r\n                    <span onClick={this.onClick} data-listing=\"new\" className={styles.listing}>New</span>\r\n                    <span onClick={this.onClick} data-listing=\"hot\" className={styles.listing}>Hot</span>\r\n                    <span onClick={this.searchCollection} data-listing=\"subscribed\" className={styles.listing}>Subscribed</span>\r\n                    <span className={styles.search_label}>/r/</span>\r\n                    <input className={styles.search} spellCheck=\"false\" onKeyDown={this.onSearch} placeholder=\"subreddit\"/>\r\n                </div>\r\n                <div className={styles.selected}>{posts.title || ''}</div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed || [],\r\n        posts: state.posts || {},\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../../../store/actions/postsAction';\r\nimport { subscribeSubreddit } from '../../../../store/actions/subredditAction';\r\n\r\nimport styles from './Subreddit.module.css';\r\n\r\nclass Subreddit extends Component {\r\n    onClick = (e) => {\r\n        this.props.fetchPosts(this.props.subreddit);\r\n    }\r\n\r\n    onSubscribe = (e) => {\r\n        const checked = e.currentTarget.checked;\r\n        this.props.subscribeSubreddit(this.props.subreddit, checked ? 'add' : 'remove');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.subreddit}>\r\n                <input type=\"checkbox\" checked={this.props.checked} onChange={this.onSubscribe} className={styles.checkbox}></input>\r\n                <span onClick={this.onClick} className={styles.title}>{this.props.subreddit.name}</span>\r\n                <span className={styles.subscribers}>{this.props.subreddit.subscribers.display}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    subscribeSubreddit,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Subreddit);\r\n","import { copy } from '../../lib/utils';\r\n\r\nexport const subscribeSubreddit = (subreddit, task) => (dispatch, getState) => {\r\n    let subreddits = copy((getState().subreddits || {}).subscribed || []);\r\n\r\n    if (task === 'add') {\r\n        subreddits.push(subreddit);\r\n    } else {\r\n        subreddits = subreddits.filter((current_subreddit) => {\r\n            return current_subreddit.key !== subreddit.key;\r\n        });\r\n    }\r\n\r\n    dispatch({\r\n        type: 'subscribe_subreddit',\r\n        payload: subreddits\r\n    });\r\n}","import Subreddit from './Subreddit';\r\n\r\nexport default Subreddit;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { searchForSubreddits } from '../../../../store/actions/searchAction';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass SearchSubreddits extends Component {\r\n    search = (e) => {\r\n        if (e.key.toLowerCase() !== 'enter') return;\r\n        const search_string = e.currentTarget.value;\r\n        this.props.searchForSubreddits(search_string);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Search:</div>\r\n                <input className={styles.search} spellCheck=\"false\" onKeyDown={this.search} placeholder=\"subreddit name\"/>\r\n                {(this.props.subreddits || []).map((subreddit) => {\r\n                    return <Subreddit key={`search_${subreddit.key}`} checked={!!this.props.subscribed_map[subreddit.key]} subreddit={subreddit} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits: state.search.subreddits,\r\n        subscribed_map: state.subreddits.subscribed_map\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    searchForSubreddits: (search_string) => searchForSubreddits(search_string)\r\n};\r\n\r\nSearchSubreddits.defaultProps = {\r\n    subreddits: [],\r\n    subscribed_map: {},\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSubreddits);","import { GET } from '../../lib/utils';\r\n\r\nexport const searchForSubreddits = (search_string) => (dispatch) => {\r\n    // const URL = `https://www.reddit.com/subreddits/search.json?q=${search_string}&include_over_18=on`;\r\n    const URL = `https://www.reddit.com/subreddits/search.json?q=${search_string}`;\r\n    GET(URL, (response) => {\r\n            const subreddits = (response.data.children || []).map((item) => {\r\n                let subreddit = {\r\n                    key: item.data.display_name.toLowerCase() + '_' + (new Date()).getTime(),\r\n                    description: item.data.public_description,\r\n                    name: item.data.display_name,\r\n                    name_lower: item.data.display_name.toLowerCase(),\r\n                    url: item.data.url,\r\n                    banner: item.data.banner_img,\r\n                    icon: item.data.icon_img,\r\n                    subscribers: {\r\n                        display: item.data.subscribers,\r\n                        full: item.data.subscribers\r\n                    }\r\n                };\r\n\r\n                const subs = subreddit.subscribers.full;\r\n                if (subs > 1000000) {\r\n                    subreddit.subscribers.display = (subs / 100000).toFixed(1) + 'M';\r\n                } else if (subs > 100000) {\r\n                    subreddit.subscribers.display = Math.floor(subs / 1000) + 'K';\r\n                } else if (subs > 10000) {\r\n                    subreddit.subscribers.display = (subs / 1000).toFixed(1) + 'K';\r\n                }\r\n                return subreddit;\r\n            });\r\n\r\n            subreddits.sort((a, b) => {\r\n                let a_match = a.name_lower.indexOf(search_string) !== -1;\r\n                let b_match = b.name_lower.indexOf(search_string) !== -1;\r\n\r\n                if (a_match && b_match) {\r\n                    // they both match the search string, the one with more subscribers is first\r\n                    return b.subscribers.full - a.subscribers.full;\r\n                } else if (a_match) {\r\n                    return -1; // negative puts a first\r\n                } else if (b_match) {\r\n                    return 1; // positive puts b first\r\n                } else {\r\n                    return b.subscribers.full - a.subscribers.full;\r\n                }\r\n            });\r\n\r\n            return subreddits;\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'search_subreddits',\r\n            payload: action_data\r\n        });\r\n    });\r\n}","import Search from './Search';\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass Subreddits extends Component {\r\n    render() {\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Subscribed:</div>\r\n                {(this.props.subscribed || []).map((subreddit) => {\r\n                    return <Subreddit key={`subbed_${subreddit.key}`} checked={true} subreddit={subreddit} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Subreddits);","import Subreddits from './Subreddits';\r\n\r\nexport default Subreddits;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport Search from './subcomponents/Search';\r\nimport Subreddits from './subcomponents/Subreddits';\r\n\r\nimport styles from './SideMenu.module.css';\r\n\r\nclass Sidemenu extends Component {\r\n    render() {\r\n        const {\r\n            className\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={classnames(styles.sidemenu, className)}>\r\n                <div className={styles.title}>Subreddits</div>\r\n                <Subreddits subscribed={this.props.subscribed} />\r\n                <Search />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Sidemenu);","import SideMenu from './SideMenu';\r\n\r\nexport default SideMenu;","import Image from './Image';\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Image.module.css';\r\n\r\nclass Image extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n        };\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n        const {\r\n            is_media_max,\r\n        } = this.state;\r\n\r\n        return (\r\n            <img\r\n                alt=\"Parse for text\"\r\n                className={classnames(styles.media, {\r\n                    [styles.media_max]: is_media_max,\r\n                })}\r\n                src={post.media.image}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        )\r\n    };\r\n}\r\n\r\nexport default Image;\r\n","import Text from './Text';\r\n\r\nexport default Text;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Text.module.css';\r\n\r\nclass Text extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={styles.content}\r\n                dangerouslySetInnerHTML={{ __html: unescapeHTML(post.content.body_html) }}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nexport default Text;\r\n","import Link from './Link';\r\n\r\nexport default Link;\r\n","import React, { Component } from 'react';\r\n\r\nimport styles from './Link.module.css';\r\n\r\nclass Link extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.content}>\r\n                <a className={styles.link} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">Go To Article</a>\r\n                <a className={styles.link_address} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.url}</a>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Link;\r\n","import Video from './Video';\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Video.module.css';\r\n\r\nclass Video extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref_media = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (!this.ref_media || !this.ref_media.current) return;\r\n\r\n        const iframe = this.ref_media.current.getElementsByTagName('iframe')[0];\r\n        const iframe_width = iframe.width;\r\n        const iframe_height = iframe.height;\r\n        const iframe_ratio = iframe_width / iframe_height;\r\n\r\n        iframe.width = this.ref_media.current.clientWidth;\r\n        iframe.height = this.ref_media.current.clientWidth / iframe_ratio;\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post = {},\r\n        } = this.props;\r\n        const {\r\n            secure_media = {},\r\n            secure_media_embed = {}\r\n        } = post;\r\n\r\n        if (secure_media.reddit_video) {\r\n            return (\r\n                <video controls src={secure_media.reddit_video.fallback_url} />\r\n            );\r\n        }\r\n\r\n        if (secure_media_embed.content) {\r\n            return (\r\n                <div\r\n                    className={styles.media}\r\n                    dangerouslySetInnerHTML={{ __html: unescapeHTML(post.secure_media_embed.content) }}\r\n                    ref={this.ref_media}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Comments.module.css';\r\n\r\nclass Comments extends Component {\r\n    renderComments (comments) {\r\n        if (!comments || !comments.length) return;\r\n        return comments.map((comment) => {\r\n            return (\r\n                <div key={comment.key} className={`${styles.comment} ${comment.even ? styles.comment_even : styles.comment_odd}`}>\r\n                    <div className={styles.author}>\r\n                        <span>{comment.author}</span>\r\n                        <span className={styles.score}>{comment.score} points</span>\r\n                        {(comment.awards || []).map((award) => {\r\n                            if (award.name.match(/gold|silver/)) {\r\n                                return <div key={award.key} className={`${styles.award} ${styles[award.name]}`}>{award.count}</div>\r\n                            }\r\n                            return <div key={award.key} className={styles.award}>{award.name}</div>\r\n                        })}\r\n                    </div>\r\n                    <div\r\n                        className={styles.body}\r\n                        dangerouslySetInnerHTML={{ __html: comment.body }}\r\n                    />\r\n                    {((comment.replies || []).length > 0) &&\r\n                        <div className={styles.comments}>{this.renderComments(comment.replies)}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {this.renderComments(this.props.comments)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, null)(Comments);\r\n","import Comments from './Comments';\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPost } from '../../store/actions/postAction';\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Image from './subcomponents/Image';\r\nimport Text from './subcomponents/Text';\r\nimport Link from './subcomponents/Link';\r\nimport Video from './subcomponents/Video';\r\n\r\nimport Comments from '../Comments';\r\n\r\nimport styles from './Post.module.css';\r\n\r\nclass Post extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_expanded: false,\r\n            is_media_max: false,\r\n            is_comments_expanded: false,\r\n        };\r\n    }\r\n\r\n    onClick = () => {\r\n        const {\r\n            is_media_expanded\r\n        } = this.state;\r\n\r\n        this.setState({\r\n            is_media_expanded: !is_media_expanded,\r\n        });\r\n    }\r\n\r\n    renderMedia (post) {\r\n        const {\r\n            is_media_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        switch (post.type) {\r\n            case 'video': return <Video post={post} />;\r\n            case 'image': return <Image post={post} />;\r\n            case 'text': return <Text post={post} />;\r\n            case 'link': return <Link post={post} />;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    renderComments (comments) {\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        if (!is_comments_expanded) {\r\n            return (\r\n                <div\r\n                    className={styles.load_comments}\r\n                    onClick={() => {\r\n                        this.setState({\r\n                            is_comments_expanded: !is_comments_expanded,\r\n                        });\r\n                        this.props.fetchPost(this.props.post);\r\n                    }}\r\n                >LOAD COMMENTS</div>\r\n            );\r\n        }\r\n\r\n        if (!comments || !comments.length) return null;\r\n        return <Comments comments={comments} />\r\n    }\r\n\r\n    renderIcon () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        let fa_icon = 'fa-question-circle';\r\n        switch (post.type) {\r\n            case 'text':\r\n                fa_icon = 'fas fa-align-left';\r\n                break;\r\n            case 'image':\r\n                fa_icon = 'far fa-image';\r\n                break;\r\n            case 'video':\r\n                fa_icon = 'fas fa-video';\r\n                break;\r\n            case 'link':\r\n                fa_icon = 'fas fa-external-link-alt';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return <i onClick={this.onClick} className={classnames(styles.icon, fa_icon)}></i>;\r\n    }\r\n\r\n    render () {\r\n        const data = this.props.post;\r\n        if (!data) return;\r\n\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded,\r\n        } = this.state;\r\n        const {\r\n            comments,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            subreddit,\r\n        } = data;\r\n\r\n        return (\r\n            <div className={styles.post}>\r\n                <div className={styles.bar}>\r\n                    <div className={styles.score}>{data.score_display}</div>\r\n                    <div className={styles.thumbnail} style={{ backgroundImage: `url(\"${data.thumbnail || data.media.image}\")` }}></div>\r\n                    <div className={styles.body}>\r\n                        <div className={styles.title}>{data.title}</div>\r\n                        {this.renderIcon()}\r\n                        <div className={styles.submission}>\r\n                            {`Submitted ${data.submitted_at} ago by ${data.author} to `}\r\n                            <span className={styles.subreddit_link} onClick={() => {\r\n                                fetchPosts(subreddit);\r\n                            }}>{data.subreddit}</span>\r\n                        </div>\r\n                        <div className={styles.comments}>{data.num_comments} comments</div>\r\n                    </div>\r\n                </div>\r\n                <div className={classnames(styles.content_wrapper, {[styles.hide]: !is_media_expanded})}>\r\n                    {this.renderMedia(data)}\r\n                </div>\r\n                <div className={classnames(styles.comments_wrapper, {[styles.hide]: !is_comments_expanded})}>\r\n                    {this.renderComments(comments.byID[data.id])}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPost,\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import { GET } from '../../lib/utils';\r\nimport {\r\n    cleanPost,\r\n    cleanComments\r\n } from '../../lib/post';\r\n\r\n /*\r\n    Fetching a full article requires the subreddit the article belongs to\r\n    and the\r\n\r\n    Sample URL: https://www.reddit.com/r/NintendoSwitch/comments/de98bj.json\r\n */\r\n\r\nexport const fetchPost = (article) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${article.subreddit}/comments/${article.id}.json`;\r\n    GET(URL, (response) => {\r\n        let [article_data, comment_data] = response;\r\n\r\n        let post = {\r\n            data: cleanPost(article_data),\r\n            comments: []\r\n        };\r\n\r\n        comment_data = comment_data.data.children;\r\n        comment_data.forEach((comment) => {\r\n            cleanComments(comment.data, post.comments, true);\r\n        });\r\n\r\n        return post;\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'post',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import Post from './Post';\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport Post from '../Post';\r\n\r\nimport styles from './Posts.module.css';\r\n\r\nclass Posts extends Component {\r\n    render () {\r\n        const {\r\n            className,\r\n            posts,\r\n        } = this.props;\r\n\r\n        console.log(posts);\r\n\r\n        return (\r\n            <div className={classnames(styles.wrapper, className)}>\r\n                {((posts || {}).list || []).map((post) => {\r\n                    if (!post || !post.id) return null;\r\n                    return <Post key={post.id} post={post} />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Posts);\r\n","import Posts from './Posts';\r\n\r\nexport default Posts;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Header from '../Header';\r\nimport SideMenu from '../SideMenu';\r\nimport Posts from '../Posts';\r\n\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.fetchPosts({\r\n            title: 'best',\r\n            url: 'best'\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <Header className={styles.header} />\r\n                <Posts className={styles.articleList} />\r\n                <SideMenu className={styles.sideMenu} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport configureStore from './store/store';\r\n\r\nimport './index.css';\r\n\r\nimport App from './modules/App';\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// serviceWorker.register();","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}
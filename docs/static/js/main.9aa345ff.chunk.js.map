{"version":3,"sources":["modules/Post/Post.module.css","modules/Header/Header.module.css","modules/Comments/Comments.module.css","modules/SideMenu/SideMenu.module.css","modules/Post/subcomponents/Gallery/Gallery.module.css","modules/SideMenu/subcomponents/Subreddit/Subreddit.module.css","modules/App/App.module.css","modules/Post/subcomponents/Link/Link.module.css","modules/Post/subcomponents/Image/Image.module.css","modules/Post/subcomponents/Video/Video.module.css","modules/Posts/Posts.module.css","modules/SideMenu/subcomponents/Search/Search.module.css","modules/Post/subcomponents/Text/Text.module.css","store/reducers/postReducer.js","store/reducers/postsReducer.js","store/reducers/subredditReducer.js","store/reducers/rootReducer.js","lib/utils.js","lib/image.js","lib/post.js","lib/subreddit.js","store/actions/subredditAction.js","store/actions/postsAction.js","modules/Header/Header.js","modules/Header/index.js","modules/SideMenu/subcomponents/Subreddit/Subreddit.js","modules/SideMenu/subcomponents/Subreddit/index.js","modules/SideMenu/subcomponents/Search/Search.js","modules/SideMenu/subcomponents/Search/index.js","modules/SideMenu/subcomponents/Subreddits/Subreddits.js","modules/SideMenu/subcomponents/Subreddits/index.js","modules/SideMenu/SideMenu.js","modules/SideMenu/index.js","modules/Post/subcomponents/Image/index.js","modules/Post/subcomponents/Image/Image.js","modules/Post/subcomponents/Text/index.js","modules/Post/subcomponents/Text/Text.js","modules/Post/subcomponents/Link/index.js","modules/Post/subcomponents/Link/Link.js","lib/dash.js","modules/Post/subcomponents/Video/index.js","modules/Post/subcomponents/Video/Video.js","modules/Post/subcomponents/Gallery/index.js","modules/Post/subcomponents/Gallery/Gallery.js","modules/Comments/Comments.js","modules/Comments/index.js","modules/Post/Post.js","store/actions/postAction.js","modules/Post/index.js","modules/Posts/Posts.js","modules/Posts/index.js","modules/App/App.js","modules/App/index.js","index.js","store/store.js"],"names":["module","exports","INITIAL_STATE","byID","current","subscribed","subscribed_map","search_list","data","subreddit_search_error","combineReducers","comments","state","action","type","payload","id","posts","list_append","list","concat","subreddits","forEach","subreddit","subreddit_data","name","copy","obj","JSON","parse","stringify","UUID","replace","c","r","Math","random","toString","unescapeHTML","string","txt","document","createElement","innerHTML","value","GET","url","parser","Promise","resolve","reject","fetch","then","response","json","e","catch","decodeImageURL","image_url","cleanPost","author","kind","children","post","title","empty","content","media","thumbnail","match","score_display","s","score","floor","toFixed","submitted_at","date","time_diff","Date","getTime","created_utc","awards","all_awardings","map","award","toLowerCase","count","key","parsePostData","is_self","isText","body","selftext","body_html","selftext_html","post_hint","indexOf","is_video","is_reddit_media_domain","isVideo","isImage","image","is_gallery","gallery_data","isGallery","images","image_map","media_metadata","items","item","media_id","mime_type","m","resolutions","p","res","width","x","height","y","source","u","console","error","parseSubreddit","description","public_description","display_name","banner","banner_img","icon","icon_img","subscribers","display","full","full_data","subs","fetchSubredditData","dispatch","action_data","fetchPosts","opts","getState","limit","after","subreddit_current","is_current_subreddit","URL","Boolean","Header","searchCollection","props","join","onClick","currentTarget","dataset","listing","onSearch","clearSubredditSearchError","fetchSubreddit","search_string","this","className","subreddits_data","classnames","styles","listings","main_links","data-listing","search_label","search","spellCheck","onKeyDown","placeholder","subreddit_icon","src","alt","subreddit_title","Component","mapDispatchToProps","connect","Subreddit","onSubscribe","checked","subscribeSubreddit","onChange","checkbox","task","push","filter","current_subreddit","SearchSubreddits","searchSubreddits","clearSearch","clearTimeout","search_timer","setTimeout","side_menu_styles","section","section_title","onKeyUp","sort","a","b","a_match","b_match","sortSubreddits","subreddits_list","parseSubreddits","defaultProps","Search","Subreddits","Sidemenu","sidemenu","SideMenu","Image","is_media_max","media_max","setState","Text","dangerouslySetInnerHTML","__html","Link","link","href","target","rel","link_address","DashPlayer","log","fetchManifest","manifest_data","Video","ref_media","React","createRef","iframe","getElementsByTagName","iframe_ratio","clientWidth","secure_media","secure_media_embed","reddit_video","dash_url","controls","fallback_url","ref","Gallery","selected_image","window","innerHeight","full_size","wrapper","thumbnails","renderSelectedImage","Comments","length","comment","even","comment_even","comment_odd","author_info","author_is_op","replies","renderComments","THUMBNAIL_ICON_MAP","text","video","gallery","ICON_MAP","default","Post","is_media_expanded","is_comments_expanded","onCommentsClick","bind","fetchPost","component","content_wrapper","hide","comments_wrapper","load_comments","fa_icon","class_name","thumbnail_image","thumbnail_subreddit","style","backgroundImage","thumbnail_icon","body_classname","body_empty","bar","renderThumbnail","renderIcon","submission","subreddit_link","num_comments","renderMedia","article","article_data","comment_data","cleanComments","parent","even_layer","parsed_comment","marked","reply","Posts","load_more","App","header","articleList","sideMenu","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","getElementById"],"mappings":"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","file":"static/js/main.9aa345ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1ZCkS\",\"bar\":\"Post_bar__2ytou\",\"score\":\"Post_score__3J9Go\",\"thumbnail\":\"Post_thumbnail__2Mv8T\",\"thumbnail_image\":\"Post_thumbnail_image__aAX9N\",\"thumbnail_subreddit\":\"Post_thumbnail_subreddit__2Qpjq\",\"thumbnail_icon\":\"Post_thumbnail_icon__3_07y\",\"body\":\"Post_body__1tjlH\",\"body_empty\":\"Post_body_empty__1ZIC6\",\"title\":\"Post_title__1sUIr\",\"icon\":\"Post_icon__2-AFI\",\"submission\":\"Post_submission__2PLyZ\",\"comments\":\"Post_comments__1eQ7f\",\"load_comments\":\"Post_load_comments__3QYMw\",\"comments_wrapper\":\"Post_comments_wrapper__14RNb\",\"hide\":\"Post_hide__q3vp2\",\"content_wrapper\":\"Post_content_wrapper__3IKz1\",\"subreddit_link\":\"Post_subreddit_link__3RnEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_links\":\"Header_main_links__3lpuR\",\"listing\":\"Header_listing__3drQY\",\"search_label\":\"Header_search_label__1_-nu\",\"search\":\"Header_search__1zI1g\",\"subreddit_current\":\"Header_subreddit_current__3kx1v\",\"subreddit_icon\":\"Header_subreddit_icon__2OO0L\",\"subreddit_title\":\"Header_subreddit_title__zjJCE\",\"subreddit_search_error\":\"Header_subreddit_search_error__1-kBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Comments_wrapper__h6tw3\",\"comments\":\"Comments_comments__3NgER\",\"comment_even\":\"Comments_comment_even__2U9nK\",\"comment_odd\":\"Comments_comment_odd__3wItb\",\"comment\":\"Comments_comment__3MfqI\",\"author_info\":\"Comments_author_info__2FkxD\",\"author_is_op\":\"Comments_author_is_op__wYCnL\",\"score\":\"Comments_score__1gShr\",\"body\":\"Comments_body__1B94B\",\"award\":\"Comments_award__yjfLH\",\"gold\":\"Comments_gold__6PfTT\",\"silver\":\"Comments_silver__3ggsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidemenu\":\"SideMenu_sidemenu__2GrsV\",\"title\":\"SideMenu_title__rRgxI\",\"section\":\"SideMenu_section__3Wl6k\",\"section_title\":\"SideMenu_section_title__3EIq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumbnails\":\"Gallery_thumbnails__3PGUn\",\"thumbnail\":\"Gallery_thumbnail__2pPAD\",\"selected_image\":\"Gallery_selected_image__8Pk5t\",\"full_size\":\"Gallery_full_size__3cThD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subreddit\":\"Subreddit_subreddit__2lgPg\",\"checkbox\":\"Subreddit_checkbox__2UDbU\",\"title\":\"Subreddit_title__3_NX6\",\"subscribers\":\"Subreddit_subscribers__2uqEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2CBHV\",\"header\":\"App_header__SZGgc\",\"articleList\":\"App_articleList__1F2Yd\",\"sideMenu\":\"App_sideMenu__3EQTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Link_content__10cBw\",\"link\":\"Link_link__2vhKr\",\"link_address\":\"Link_link_address__15p7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Image_media__2V2Pq\",\"media_max\":\"Image_media_max__99lxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Video_media__2ghAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Posts_wrapper__11-4S\",\"load_more\":\"Posts_load_more__1Ku_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__19ult\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Text_content__1lINs\"};","const INITIAL_STATE = {\r\n    byID: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'post': {\r\n            const { byID = {} } = state;\r\n            byID[action.payload.data.id] = action.payload.comments;\r\n            return { byID };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    current: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'posts': {\r\n            if (action.payload.list_append) {\r\n                return {\r\n                    ...state,\r\n                    current: {\r\n                        ...state.current,\r\n                        list_append: true,\r\n                        list: state.current.list.concat(action.payload.list),\r\n                    },\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                current: action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    subscribed: [],\r\n    subscribed_map: {},\r\n    search_list: [],\r\n    data: {},\r\n    subreddit_search_error: false,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'subscribe_subreddit':\r\n            let subscribed_map = {};\r\n            (action.payload || []).forEach((subreddit) => {\r\n                subscribed_map[subreddit.id] = subreddit;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                subscribed: action.payload,\r\n                subscribed_map: subscribed_map\r\n            };\r\n\r\n        case 'subreddit_data': {\r\n            const data = state.data;\r\n            const subreddit_data = action.payload;\r\n            data[subreddit_data.name] = subreddit_data;\r\n\r\n            return {\r\n                ...state,\r\n                data,\r\n            };\r\n        }\r\n\r\n        case 'search_subreddits': {\r\n            // Subreddits from the search have icon and banner data and can be\r\n            // added to the data map\r\n            const data = state.data;\r\n            const search_list = action.payload;\r\n\r\n            search_list.forEach((subreddit_data) => {\r\n                data[subreddit_data.name] = subreddit_data;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                search_list,\r\n                data,\r\n            };\r\n        }\r\n\r\n        case 'clear_search': {\r\n            return {\r\n                ...state,\r\n                search_list: [],\r\n            };\r\n        }\r\n\r\n        case 'subreddit_search_error': {\r\n            return {\r\n                ...state,\r\n                subreddit_search_error: true,\r\n            };\r\n        }\r\n\r\n        case 'subreddit_search_clear': {\r\n            return {\r\n                ...state,\r\n                subreddit_search_error: false,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\nimport postsReducer from './postsReducer';\r\nimport subredditReducer from './subredditReducer';\r\n\r\nexport default combineReducers({\r\n    comments: postReducer,\r\n    posts: postsReducer,\r\n    subreddits: subredditReducer\r\n});\r\n","export function copy (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function UUID () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = (c === 'x') ? r : ((r & 0x3) | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function unescapeHTML (string) {\r\n    const txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = string;\r\n    return txt.value;\r\n}\r\n\r\nexport function GET (url, parser) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            fetch(url).then(response => response.json()).then((response) => {\r\n                try {\r\n                    resolve(parser(response));\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            }).catch((e) => {\r\n                reject(e)\r\n            });\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n","export function imageIDtoURL (image_id, mime_type) {\r\n    // https://i.redd.it/<ID>.<M>\r\n    return `https://i.redd.it/${image_id}.${mime_type.replace('image/', '')}`;\r\n}\r\n\r\nexport function decodeImageURL (image_url) {\r\n    return image_url.replace(/&amp;/g, '&');\r\n}\r\n","import marked from 'marked';\r\nimport {\r\n    UUID,\r\n    unescapeHTML,\r\n} from './utils';\r\nimport {\r\n    imageIDtoURL,\r\n    decodeImageURL,\r\n} from './image';\r\n\r\n/*\r\n    Caveats I have noticed from looking at reddit post json:\r\n        title:\r\n            Not everything will have a title, like some askreddit threads.\r\n        url: multipurpose, link to an image or an article or a video\r\n            Type needs to be figured out by looking at a couple of other fields\r\n*/\r\n\r\nfunction parsePostData (data) {\r\n    return {\r\n        ...data,\r\n\r\n        title: (data.title || '').replace(/&amp;/g, '&'),\r\n        empty: false, // Mainly used for text to know if there is body content\r\n        type: 'none',\r\n        content: {},\r\n        media: {},\r\n\r\n        // TODO: This info is important and probably shouldnt be lost\r\n        thumbnail: (!data.thumbnail.match(/self|spoiler|default/)) ? data.thumbnail : null,\r\n\r\n        score_display: ((s) => {\r\n            if (s > 100000) return Math.floor(s / 1000) + 'K';\r\n            if (s > 10000) return (s / 1000).toFixed(1) + 'K';\r\n            return s;\r\n        })(data.score),\r\n\r\n        submitted_at: ((date) => { // date is in seconds\r\n            let time_diff = (new Date()).getTime() - (new Date( date * 1000)).getTime();\r\n            time_diff = time_diff / 1000 / 60; // milli -> sec -> min\r\n            // TODO: Should probably add \"days\" as a possibility\r\n            if (time_diff > 60) return Math.floor(time_diff / 60) + ' hours';\r\n            return Math.floor(time_diff) + ' minutes';\r\n        })(data.created_utc),\r\n\r\n        awards: (data.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                // React component key, award.id is not unique enough\r\n                key: `${award.id}-${UUID()}`,\r\n            };\r\n        })\r\n    };\r\n}\r\n\r\nfunction isText (data) {\r\n    return data.is_self;\r\n}\r\n\r\nfunction isImage (data) {\r\n    // Check the post_hint for a tip\r\n    if (data.post_hint && data.post_hint.indexOf('image') !== -1) return true;\r\n    // Do a basic check on the extension of the url\r\n    if (data.url && data.url.match(/.jpg|.jpeg|.png|.bmp|.gif/)) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isVideo (data) {\r\n    // Check the post_hint\r\n    if (data.post_hint && data.post_hint.indexOf('video') !== -1) return true;\r\n\r\n    if (data.url && data.url.match(/.gifv/)) return true;\r\n\r\n    // Do a basic check on the common video fields\r\n    if (data.url && data.is_video && data.is_reddit_media_domain) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isGallery (data) {\r\n    if (data.is_gallery) return true;\r\n    if (data.url.indexOf('gallery') !== -1 && data.gallery_data) return true;\r\n    return false;\r\n}\r\n\r\nexport function cleanPost (data) {\r\n    try {\r\n        if (!data.author && data.kind) {\r\n            data = data.data.children[0].data;\r\n        }\r\n\r\n        let post = parsePostData(data);\r\n\r\n        if (isText(data)) {\r\n            post.type = 'text';\r\n            post.content.body = data.selftext;\r\n            post.content.body_html = data.selftext_html;\r\n            if (!post.content.body && !post.content.body_html) {\r\n                post.empty = true;\r\n            }\r\n        } else if (isVideo(data)) {\r\n            post.type = 'video';\r\n            // post.media.video = data.secure_media || data.media;\r\n        } else if (isImage(data)) {\r\n            post.type = 'image';\r\n            post.media.image = data.url;\r\n        } else if(isGallery(data)) {\r\n            post.type = 'gallery';\r\n            post.media.images = [];\r\n            const image_map = post.media_metadata || {};\r\n            post.media.images = post.gallery_data.items.map((item) => {\r\n                const id = image_map[item.media_id].id;\r\n                const mime_type = image_map[item.media_id].m;\r\n                // const source = imageIDtoURL(id, mime_type);\r\n                return {\r\n                    id,\r\n                    mime_type,\r\n                    // source,\r\n                    resolutions: image_map[item.media_id].p.map((res) => {\r\n                        return {\r\n                            width: res.x,\r\n                            height: res.y,\r\n                            source: decodeImageURL(res.u),\r\n                        };\r\n                    }),\r\n                    thumbnail: {\r\n                        source: decodeImageURL(image_map[item.media_id].p[0].u),\r\n                    },\r\n                    width: image_map[item.media_id].s.x,\r\n                    height: image_map[item.media_id].s.y,\r\n                    source: decodeImageURL(image_map[item.media_id].s.u),\r\n                };\r\n            });\r\n        } else if (data.url) {\r\n            post.type = 'link';\r\n        }\r\n\r\n        return post;\r\n    } catch (e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function cleanComments (comment, parent, even_layer) {\r\n    if (!comment.body) return;\r\n\r\n    let parsed_comment = {\r\n        id: comment.id,\r\n        key: `${comment.id}_${UUID()}`,\r\n        author: comment.author,\r\n        body: marked(unescapeHTML(comment.body_html)),\r\n        score: comment.score,\r\n        awards: (comment.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                key: `${award.id}-${UUID()}`\r\n            };\r\n        }),\r\n        even: even_layer\r\n    };\r\n    parent.push(parsed_comment);\r\n\r\n    if (comment.replies && comment.replies.data.children) {\r\n        parsed_comment.replies = [];\r\n        comment.replies.data.children.forEach((reply) => {\r\n            cleanComments(reply.data, parsed_comment.replies, !even_layer);\r\n        });\r\n    }\r\n}\r\n","export function parseSubreddit (data) {\r\n    let subreddit = {\r\n        id: data.name,\r\n        // key: data.display_name.toLowerCase() + '_' + (new Date()).getTime(),\r\n        description: data.public_description,\r\n        name: data.display_name.toLowerCase(),\r\n        display_name: data.display_name,\r\n        url: data.url,\r\n        banner: data.banner_img,\r\n        icon: data.icon_img,\r\n        subscribers: {\r\n            display: data.subscribers,\r\n            full: data.subscribers\r\n        },\r\n        full_data: data,\r\n    };\r\n\r\n    const subs = subreddit.subscribers.full;\r\n    if (subs > 1000000) {\r\n        subreddit.subscribers.display = (subs / 100000).toFixed(1) + 'M';\r\n    } else if (subs > 100000) {\r\n        subreddit.subscribers.display = Math.floor(subs / 1000) + 'K';\r\n    } else if (subs > 10000) {\r\n        subreddit.subscribers.display = (subs / 1000).toFixed(1) + 'K';\r\n    }\r\n\r\n    return subreddit;\r\n}\r\n\r\nexport function parseSubreddits (subreddits_list = []) {\r\n    return subreddits_list.map((item) => {\r\n        const { data = {} } = item;\r\n        return parseSubreddit(data);\r\n    });\r\n};\r\n\r\nexport function sortSubreddits (subreddits, search_string) {\r\n    subreddits.sort((a, b) => {\r\n        let a_match = a.name.indexOf(search_string) !== -1;\r\n        let b_match = b.name.indexOf(search_string) !== -1;\r\n\r\n        if (a_match && b_match) {\r\n            // they both match the search string, the one with more subscribers is first\r\n            return b.subscribers.full - a.subscribers.full;\r\n        } else if (a_match) {\r\n            return -1; // negative puts a first\r\n        } else if (b_match) {\r\n            return 1; // positive puts b first\r\n        } else {\r\n            return b.subscribers.full - a.subscribers.full;\r\n        }\r\n    });\r\n    return subreddits;\r\n}\r\n","import {\r\n    GET,\r\n    copy\r\n} from '../../lib/utils';\r\n\r\nimport {\r\n    parseSubreddit,\r\n    parseSubreddits,\r\n    sortSubreddits,\r\n} from '../../lib/subreddit';\r\n\r\nconst SHOW_MATURE = false;\r\n\r\nexport const searchSubreddits = (search_string) => (dispatch) => {\r\n    let URL = `https://www.reddit.com/subreddits/search.json?q=${search_string}`;\r\n    if (SHOW_MATURE) URL += '&include_over_18=on';\r\n    GET(URL, (response) => {\r\n        return sortSubreddits(parseSubreddits(response.data.children), search_string);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'search_subreddits',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const clearSearch = () => (dispatch) => {\r\n    dispatch({\r\n        type: 'clear_search'\r\n    });\r\n}\r\n\r\nexport const fetchSubredditData = (subreddit) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${subreddit.name}/about.json`;\r\n    GET(URL, (response) => {\r\n        return parseSubreddit(response.data);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'subreddit_data',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const subscribeSubreddit = (subreddit, task) => (dispatch, getState) => {\r\n    let subreddits = copy((getState().subreddits || {}).subscribed || []);\r\n\r\n    if (task === 'add') {\r\n        subreddits.push(subreddit);\r\n    }\r\n    if (task === 'remove') {\r\n        subreddits = subreddits.filter((current_subreddit) => {\r\n            return current_subreddit.id !== subreddit.id;\r\n        });\r\n    }\r\n\r\n    dispatch({\r\n        type: 'subscribe_subreddit',\r\n        payload: subreddits\r\n    });\r\n}\r\n","import { GET, copy } from '../../lib/utils';\r\nimport { cleanPost } from '../../lib/post';\r\n\r\nimport { fetchSubredditData } from './subredditAction';\r\n\r\n/*\r\n    /r/pics+gifs+todayilearned/new.json\r\n        ?count=count of before/after post\r\n        ?limit=number of posts wanted in return\r\n        ?after=post.id\r\n        ?before=post.id\r\n*/\r\n\r\nexport const fetchSubreddit = (subreddit, opts = {}) => (dispatch, getState) => {\r\n    subreddit.name = subreddit.title.toLowerCase();\r\n\r\n    if (subreddit.type === 'subreddit') {\r\n        const subreddits_data = copy((getState().subreddits || {}).data || {});\r\n        const subreddit_data = subreddits_data[subreddit.name];\r\n        if (!subreddit_data) {\r\n            dispatch(fetchSubredditData(subreddit));\r\n        } else {\r\n            subreddit = subreddit_data;\r\n        }\r\n    }\r\n\r\n    const URL = `https://www.reddit.com/${subreddit.url}.json?limit=25`;\r\n\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            subreddit,\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            }),\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data,\r\n        });\r\n        dispatch({\r\n            type: 'subreddit_search_clear',\r\n        });\r\n    }).catch((error) => {\r\n        dispatch({\r\n            type: 'subreddit_search_error',\r\n        });\r\n    });\r\n}\r\n\r\nexport const clearSubredditSearchError = () => (dispatch) => {\r\n    dispatch({\r\n        type: 'subreddit_search_clear',\r\n    });\r\n}\r\n\r\nexport const fetchPosts = (subreddit, opts = {}) => (dispatch, getState) => {\r\n    const {\r\n        limit = 25,\r\n        count,\r\n        after,\r\n    } = opts;\r\n\r\n    subreddit.name = subreddit.name || subreddit.title.toLowerCase();\r\n    subreddit.type = subreddit.type || 'subreddit';\r\n\r\n    const subreddit_current = copy(getState().posts.current.subreddit || {});\r\n    const is_current_subreddit = subreddit_current && subreddit_current.name === subreddit.name;\r\n\r\n    if (subreddit.type === 'subreddit') {\r\n        const subreddits_data = copy((getState().subreddits || {}).data || {});\r\n        const subreddit_data = subreddits_data[subreddit.name];\r\n        if (!subreddit_data) {\r\n            dispatch(fetchSubredditData(subreddit));\r\n        } else {\r\n            subreddit = subreddit_data;\r\n        }\r\n    }\r\n\r\n    let URL = `https://www.reddit.com/${subreddit.url}.json?limit=${limit}`;\r\n    if (count) URL += `&count=${count}`;\r\n    if (after) URL += `&after=${after}`;\r\n\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            subreddit,\r\n            list_append: (is_current_subreddit && Boolean(after)),\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            }),\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data\r\n        });\r\n    }).catch((error) => {\r\n        // dispatch({\r\n        //     type: 'posts_error',\r\n        //     error,\r\n        // });\r\n    });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport {\r\n    fetchSubreddit,\r\n    fetchPosts,\r\n    clearSubredditSearchError,\r\n} from '../../store/actions/postsAction';\r\n\r\nimport styles from './Header.module.css';\r\n\r\nclass Header extends Component {\r\n    searchCollection = (e) => {\r\n        const {\r\n            subscribed,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        fetchPosts({\r\n            title: 'Subscribed',\r\n            type: 'listing',\r\n            url: '/r/' + subscribed.map(s => s.name).join('+'),\r\n        });\r\n    }\r\n\r\n    onClick = (e) => {\r\n        this.props.fetchPosts({\r\n            title: e.currentTarget.dataset.listing,\r\n            type: 'listing',\r\n            url: e.currentTarget.dataset.listing\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        const {\r\n            clearSubredditSearchError,\r\n            fetchSubreddit,\r\n        } = this.props;\r\n        clearSubredditSearchError();\r\n\r\n        if (e.key.toLowerCase() !== 'enter') return;\r\n        const search_string = e.currentTarget.value;\r\n        fetchSubreddit({\r\n            title: e.currentTarget.value,\r\n            type: 'subreddit',\r\n            url: '/r/' + search_string,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            className,\r\n            posts = {},\r\n            subreddits_data,\r\n            subreddit_search_error,\r\n        } = this.props;\r\n        const {\r\n            title,\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        const subreddit_data = subreddits_data[subreddit.name] || {};\r\n\r\n        return (\r\n            <header className={classnames(styles.listings, className)}>\r\n                <div className={styles.main_links}>\r\n                    <span onClick={this.onClick} data-listing=\"best\" className={styles.listing}>Best</span>\r\n                    <span onClick={this.onClick} data-listing=\"top\" className={styles.listing}>Top</span>\r\n                    <span onClick={this.onClick} data-listing=\"new\" className={styles.listing}>New</span>\r\n                    <span onClick={this.onClick} data-listing=\"hot\" className={styles.listing}>Hot</span>\r\n                    <span onClick={this.searchCollection} data-listing=\"subscribed\" className={styles.listing}>Subscribed</span>\r\n                    <span className={styles.search_label}>/r/</span>\r\n                    <input className={styles.search} spellCheck=\"false\" onKeyDown={this.onSearch} placeholder=\"subreddit\"/>\r\n                    {subreddit_search_error && <span className={styles.subreddit_search_error}>SUBREDDIT NOT FOUND</span>}\r\n                </div>\r\n                <div className={styles.subreddit_current}>\r\n                    {subreddit_data.icon && <img className={styles.subreddit_icon} src={subreddit_data.icon} alt=\"Subreddit Icon\" />}\r\n                    <span className={styles.subreddit_title}>{title || ''}</span>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits_data: state.subreddits.data,\r\n        subscribed: state.subreddits.subscribed || [],\r\n        subreddit_search_error: state.subreddits.subreddit_search_error || false,\r\n        posts: state.posts.current,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    fetchSubreddit,\r\n    clearSubredditSearchError,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../../../store/actions/postsAction';\r\nimport { subscribeSubreddit } from '../../../../store/actions/subredditAction';\r\n\r\nimport styles from './Subreddit.module.css';\r\n\r\nclass Subreddit extends Component {\r\n    onClick = (e) => {\r\n        this.props.fetchPosts(this.props.subreddit);\r\n    }\r\n\r\n    onSubscribe = (e) => {\r\n        const checked = e.currentTarget.checked;\r\n        this.props.subscribeSubreddit(this.props.subreddit, checked ? 'add' : 'remove');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.subreddit}>\r\n                <input type=\"checkbox\" checked={this.props.checked} onChange={this.onSubscribe} className={styles.checkbox}></input>\r\n                <span onClick={this.onClick} className={styles.title}>{this.props.subreddit.display_name}</span>\r\n                <span className={styles.subscribers}>{this.props.subreddit.subscribers.display}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    subscribeSubreddit,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Subreddit);\r\n","import Subreddit from './Subreddit';\r\n\r\nexport default Subreddit;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    searchSubreddits,\r\n    clearSearch,\r\n} from '../../../../store/actions/subredditAction';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass SearchSubreddits extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.search_timer = null;\r\n    }\r\n\r\n    search = (e) => {\r\n        const {\r\n            searchSubreddits,\r\n            clearSearch,\r\n        } = this.props;\r\n\r\n        const search_string = e.currentTarget.value;\r\n\r\n        if (!search_string) {\r\n            clearTimeout(this.search_timer);\r\n            this.search_timer = null;\r\n            clearSearch();\r\n            return;\r\n        }\r\n\r\n        if (e.key.toLowerCase() !== 'enter') {\r\n            clearTimeout(this.search_timer);\r\n            this.search_timer = null;\r\n            this.search_timer = setTimeout(() => {\r\n                searchSubreddits(search_string);\r\n            }, 300);\r\n        } else {\r\n            searchSubreddits(search_string);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            search_list,\r\n            subscribed_map,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Search:</div>\r\n                <input className={styles.search} spellCheck=\"false\" onKeyUp={this.search} placeholder=\"subreddit name\"/>\r\n\r\n                {(search_list || []).map((subreddit) => {\r\n                    return (\r\n                        <Subreddit\r\n                            key={`search_${subreddit.id}`}\r\n                            checked={!!subscribed_map[subreddit.id]}\r\n                            subreddit={subreddit}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        search_list: state.subreddits.search_list,\r\n        subscribed_map: state.subreddits.subscribed_map,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    searchSubreddits,\r\n    clearSearch,\r\n};\r\n\r\nSearchSubreddits.defaultProps = {\r\n    subreddits: [],\r\n    subscribed_map: {},\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSubreddits);\r\n","import Search from './Search';\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass Subreddits extends Component {\r\n    render() {\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Subscribed:</div>\r\n                {(this.props.subscribed || []).map((subreddit) => {\r\n                    return <Subreddit key={`subbed_${subreddit.id}`} checked={true} subreddit={subreddit} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Subreddits);\r\n","import Subreddits from './Subreddits';\r\n\r\nexport default Subreddits;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport Search from './subcomponents/Search';\r\nimport Subreddits from './subcomponents/Subreddits';\r\n\r\nimport styles from './SideMenu.module.css';\r\n\r\nclass Sidemenu extends Component {\r\n    render() {\r\n        const {\r\n            className\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={classnames(styles.sidemenu, className)}>\r\n                <div className={styles.title}>Subreddits</div>\r\n                <Subreddits subscribed={this.props.subscribed} />\r\n                <Search />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Sidemenu);","import SideMenu from './SideMenu';\r\n\r\nexport default SideMenu;","import Image from './Image';\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Image.module.css';\r\n\r\nclass Image extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n        };\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n        const {\r\n            is_media_max,\r\n        } = this.state;\r\n\r\n        return (\r\n            <img\r\n                alt=\"Parse for text\"\r\n                className={classnames(styles.media, {\r\n                    [styles.media_max]: is_media_max,\r\n                })}\r\n                src={post.media.image}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        )\r\n    };\r\n}\r\n\r\nexport default Image;\r\n","import Text from './Text';\r\n\r\nexport default Text;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Text.module.css';\r\n\r\nclass Text extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={styles.content}\r\n                dangerouslySetInnerHTML={{ __html: unescapeHTML(post.content.body_html) }}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nexport default Text;\r\n","import Link from './Link';\r\n\r\nexport default Link;\r\n","import React, { Component } from 'react';\r\n\r\nimport styles from './Link.module.css';\r\n\r\nclass Link extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.content}>\r\n                <a className={styles.link} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">Go To Article</a>\r\n                <a className={styles.link_address} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.url}</a>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Link;\r\n","import { GET } from './utils';\r\n\r\nclass DashPlayer {\r\n    constructor (opts = {}) {\r\n        const { url } = opts;\r\n\r\n        console.log(url);\r\n\r\n        this.fetchManifest(url);\r\n    }\r\n\r\n    fetchManifest (URL) {\r\n        GET(URL, (response) => {\r\n            return response;\r\n        }).then((manifest_data) => {\r\n            console.log(manifest_data);\r\n        });\r\n    }\r\n}\r\n\r\nexport default DashPlayer;\r\n","import Video from './Video';\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\nimport DashPlayer from '../../../../lib/dash';\r\n\r\nimport styles from './Video.module.css';\r\n\r\nclass Video extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref_media = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (!this.ref_media || !this.ref_media.current) return;\r\n\r\n        const iframe = this.ref_media.current.getElementsByTagName('iframe')[0];\r\n        const iframe_width = iframe.width;\r\n        const iframe_height = iframe.height;\r\n        const iframe_ratio = iframe_width / iframe_height;\r\n\r\n        iframe.width = this.ref_media.current.clientWidth;\r\n        iframe.height = this.ref_media.current.clientWidth / iframe_ratio;\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post = {},\r\n        } = this.props;\r\n        const {\r\n            secure_media = {},\r\n            secure_media_embed = {}\r\n        } = post;\r\n\r\n        // if (post.url) {\r\n        //     return (\r\n        //         <video\r\n        //             className={styles.media}\r\n        //             controls\r\n        //         >\r\n        //             <meta\r\n        //                 itemProp=\"embedURL\"\r\n        //                 content={post.url}\r\n        //             />\r\n        //         </video>\r\n        //     );\r\n        // }\r\n\r\n        if (secure_media.reddit_video.dash_url) {\r\n            new DashPlayer({\r\n                url: secure_media.reddit_video.dash_url,\r\n            });\r\n        }\r\n\r\n        if (secure_media.reddit_video) {\r\n            return (\r\n                <video\r\n                    className={styles.media}\r\n                    controls\r\n                    src={secure_media.reddit_video.fallback_url}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (secure_media_embed.content) {\r\n            return (\r\n                <div\r\n                    className={styles.media}\r\n                    dangerouslySetInnerHTML={{ __html: unescapeHTML(post.secure_media_embed.content) }}\r\n                    ref={this.ref_media}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Video;\r\n","import Gallery from './Gallery';\r\n\r\nexport default Gallery;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Gallery.module.css';\r\n\r\nclass Gallery extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n            selected_image: null,\r\n        };\r\n    }\r\n\r\n    renderSelectedImage () {\r\n        const {\r\n            is_media_max,\r\n            selected_image,\r\n        } = this.state;\r\n\r\n        if (!selected_image) return null;\r\n\r\n        let source = selected_image.source;\r\n        if (!is_media_max) {\r\n            // Find the image with the biggest height still\r\n            // smaller than the window\r\n            selected_image.resolutions.forEach((res) => {\r\n                if (res.height <= window.innerHeight) {\r\n                    source = res.source;\r\n                }\r\n            });\r\n        }\r\n\r\n        return (\r\n            <img\r\n                alt=\"Gallery Main Image\"\r\n                className={classnames(styles.selected_image, {\r\n                    [styles.full_size]: is_media_max,\r\n                })}\r\n                src={source}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.thumbnails}>\r\n                    {post.media.images.map((image) => {\r\n                        return (\r\n                            <img\r\n                                alt=\"Gallery Image\"\r\n                                className={styles.thumbnail}\r\n                                src={image.thumbnail.source}\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        is_media_max: false,\r\n                                        selected_image: image,\r\n                                    });\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n                {this.renderSelectedImage()}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Comments.module.css';\r\n\r\nclass Comments extends Component {\r\n    renderComments (comments) {\r\n        if (!comments || !comments.length) return;\r\n        const { post } = this.props;\r\n\r\n        return comments.map((comment) => {\r\n            return (\r\n                <div key={comment.key} className={`${styles.comment} ${comment.even ? styles.comment_even : styles.comment_odd}`}>\r\n                    <div className={styles.author_info}>\r\n                        <span className={classnames(styles.author, {\r\n                            [styles.author_is_op]: post.author === comment.author,\r\n                        })}>{comment.author}</span>\r\n                        <span className={styles.score}>{comment.score} points</span>\r\n                        {(comment.awards || []).map((award) => {\r\n                            if (award.name.match(/gold|silver/)) {\r\n                                return <div key={award.key} className={`${styles.award} ${styles[award.name]}`}>{award.count}</div>\r\n                            }\r\n                            return <div key={award.key} className={styles.award}>{award.name}</div>\r\n                        })}\r\n                    </div>\r\n                    <div\r\n                        className={styles.body}\r\n                        dangerouslySetInnerHTML={{ __html: comment.body }}\r\n                    />\r\n                    {((comment.replies || []).length > 0) &&\r\n                        <div className={styles.comments}>{this.renderComments(comment.replies)}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {this.renderComments(this.props.comments)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, null)(Comments);\r\n","import Comments from './Comments';\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPost } from '../../store/actions/postAction';\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Image from './subcomponents/Image';\r\nimport Text from './subcomponents/Text';\r\nimport Link from './subcomponents/Link';\r\nimport Video from './subcomponents/Video';\r\nimport Gallery from './subcomponents/Gallery';\r\n\r\nimport Comments from '../Comments';\r\n\r\nimport styles from './Post.module.css';\r\n\r\nconst THUMBNAIL_ICON_MAP = {\r\n    link: 'far fa-newspaper',\r\n    text: 'far fa-comment-alt',\r\n    // image: 'far fa-file-image',\r\n    // video: 'far fa-file-video',\r\n    // text: 'fas fa-align-left',\r\n    image: 'far fa-image',\r\n    video: 'fas fa-video',\r\n    // link: 'fas fa-external-link-alt',\r\n    gallery: 'far fa-images',\r\n};\r\n\r\nconst ICON_MAP = {\r\n    text: 'fas fa-align-left',\r\n    image: 'far fa-image',\r\n    video: 'fas fa-video',\r\n    link: 'fas fa-external-link-alt',\r\n    gallery: 'far fa-images',\r\n    default: 'fa-question-circle',\r\n};\r\n\r\nclass Post extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_expanded: false,\r\n            is_comments_expanded: false,\r\n        };\r\n\r\n        this.onCommentsClick = this.onCommentsClick.bind(this);\r\n    }\r\n\r\n    onClick = () => {\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded,\r\n        } = this.state;\r\n\r\n        this.setState({\r\n            is_media_expanded: !is_media_expanded,\r\n            is_comments_expanded: (is_media_expanded) ? false : is_comments_expanded,\r\n        });\r\n    }\r\n\r\n    onCommentsClick () {\r\n        const {\r\n            post,\r\n            fetchPost,\r\n        } = this.props;\r\n        const {\r\n            is_comments_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_comments_expanded) {\r\n            fetchPost(post);\r\n        }\r\n\r\n        this.setState({\r\n            is_comments_expanded: !is_comments_expanded,\r\n        });\r\n    }\r\n\r\n    renderMedia (post) {\r\n        const {\r\n            is_media_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        console.log(post);\r\n\r\n        let component = null;\r\n        switch (post.type) {\r\n            case 'video':\r\n                component = <Video post={post} />;\r\n                break;\r\n            case 'image':\r\n                component = <Image post={post} />;\r\n                break;\r\n            case 'text':\r\n                component = <Text post={post} />;\r\n                break;\r\n            case 'link':\r\n                component = <Link post={post} />;\r\n                break;\r\n            case 'gallery':\r\n                component = <Gallery post={post} />;\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className={classnames(styles.content_wrapper, {[styles.hide]: !is_media_expanded})}>\r\n                {component}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderComments (comments) {\r\n        const {\r\n            post\r\n        } = this.props;\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded\r\n        } = this.state;\r\n\r\n        if (is_media_expanded && !is_comments_expanded) {\r\n            return (\r\n                <div className={styles.comments_wrapper}>\r\n                    <div\r\n                        className={styles.load_comments}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                is_comments_expanded: !is_comments_expanded,\r\n                            });\r\n                            this.props.fetchPost(this.props.post);\r\n                        }}\r\n                    >LOAD COMMENTS</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!comments || !comments.length) return null;\r\n        return (\r\n            <div className={classnames(styles.comments_wrapper, {[styles.hide]: !is_comments_expanded})}>\r\n                <Comments comments={comments} post={post} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderIcon () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        let fa_icon = ICON_MAP[post.type] || ICON_MAP.default;\r\n        // Show no icon for empty text posts\r\n        if (post.type === 'text' && post.empty) fa_icon = '';\r\n\r\n        return <i onClick={this.onClick} className={classnames(styles.icon, fa_icon)}></i>;\r\n    }\r\n\r\n    renderThumbnail () {\r\n        const {\r\n            subreddit = {},\r\n            post,\r\n        } = this.props;\r\n\r\n        let class_name = styles.thumbnail;\r\n        if (post.thumbnail || post.media.image) {\r\n            class_name = classnames(class_name, styles.thumbnail_image);\r\n        }\r\n\r\n        const icon = post.thumbnail || post.media.image || subreddit.icon\r\n        if (icon) {\r\n            if (icon === subreddit.icon) {\r\n                class_name = classnames(class_name, styles.thumbnail_subreddit);\r\n            }\r\n            return (\r\n                <div\r\n                    className={class_name}\r\n                    style={{ backgroundImage: `url(\"${icon}\")` }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return <i className={classnames(styles.thumbnail_icon, THUMBNAIL_ICON_MAP[post.type])} />;\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded,\r\n        } = this.state;\r\n        const {\r\n            post,\r\n            comments,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        if (!post) return;\r\n\r\n        const body_classname = classnames(styles.body, {\r\n            [styles.body_empty]: post.empty,\r\n        });\r\n\r\n        return (\r\n            <div className={styles.post}>\r\n                <div className={styles.bar}>\r\n                    <div className={styles.score}>{post.score_display}</div>\r\n                    {this.renderThumbnail()}\r\n                    <div className={body_classname}>\r\n                        <div className={styles.title}>{post.title}</div>\r\n                        {this.renderIcon()}\r\n                        <div className={styles.submission}>\r\n                            {`Submitted ${post.submitted_at} ago by ${post.author} to `}\r\n                            <span className={styles.subreddit_link} onClick={() => {\r\n                                fetchPosts({\r\n                                    title: post.subreddit,\r\n                                    type: 'subreddit',\r\n                                    name: post.subreddit,\r\n                                    url: `/r/${post.subreddit}`,\r\n                                });\r\n                            }}>{post.subreddit}</span>\r\n                        </div>\r\n                        <div className={styles.comments} onClick={this.onCommentsClick}>{post.num_comments} comments</div>\r\n                    </div>\r\n                </div>\r\n                {this.renderMedia(post)}\r\n                {this.renderComments(comments.byID[post.id])}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPost,\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import { GET } from '../../lib/utils';\r\nimport {\r\n    cleanPost,\r\n    cleanComments\r\n } from '../../lib/post';\r\n\r\n /*\r\n    Fetching a full article requires the subreddit the article belongs to\r\n    and the\r\n\r\n    Sample URL: https://www.reddit.com/r/NintendoSwitch/comments/de98bj.json\r\n */\r\n\r\nexport const fetchPost = (article) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${article.subreddit}/comments/${article.id}.json`;\r\n    GET(URL, (response) => {\r\n        let [article_data, comment_data] = response;\r\n\r\n        let post = {\r\n            data: cleanPost(article_data),\r\n            comments: []\r\n        };\r\n\r\n        comment_data = comment_data.data.children;\r\n        comment_data.forEach((comment) => {\r\n            cleanComments(comment.data, post.comments, true);\r\n        });\r\n\r\n        return post;\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'post',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import Post from './Post';\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Post from '../Post';\r\n\r\nimport styles from './Posts.module.css';\r\n\r\nclass Posts extends Component {\r\n    render () {\r\n        const {\r\n            className,\r\n            posts,\r\n            subreddits_data,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            list = [],\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        // TODO : need detection for end of subreddit\r\n\r\n        const subreddit_data = subreddits_data[subreddit.name] || {};\r\n        console.log(subreddit_data);\r\n        console.log(posts);\r\n\r\n        return (\r\n            <div className={classnames(styles.wrapper, className)}>\r\n                {list.map((post) => {\r\n                    if (!post || !post.id) return null;\r\n                    return <Post key={post.id} subreddit={subreddit_data} post={post} />\r\n                })}\r\n                {list.length && <div className={styles.load_more} onClick={() => {\r\n                    fetchPosts(subreddit, {\r\n                        count: list.length,\r\n                        after: list[list.length - 1].name,\r\n                    });\r\n                }}>LOAD MORE</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits_data: state.subreddits.data,\r\n        posts: state.posts.current,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n","import Posts from './Posts';\r\n\r\nexport default Posts;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Header from '../Header';\r\nimport SideMenu from '../SideMenu';\r\nimport Posts from '../Posts';\r\n\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.fetchPosts({\r\n            title: 'best',\r\n            type: 'listing',\r\n            url: 'best'\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <Header className={styles.header} />\r\n                <Posts className={styles.articleList} />\r\n                <SideMenu className={styles.sideMenu} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport configureStore from './store/store';\r\n\r\nimport './index.css';\r\n\r\nimport App from './modules/App';\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// serviceWorker.register();","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}
{"version":3,"sources":["modules/Post/Post.module.css","modules/Post/subcomponents/Video/Video.module.css","modules/Header/Header.module.css","modules/Comments/Comments.module.css","modules/SideMenu/SideMenu.module.css","modules/Post/subcomponents/Gallery/Gallery.module.css","modules/SideMenu/subcomponents/Subreddit/Subreddit.module.css","modules/App/App.module.css","modules/Post/subcomponents/Link/Link.module.css","modules/Post/subcomponents/Image/Image.module.css","modules/Posts/Posts.module.css","modules/SideMenu/subcomponents/Search/Search.module.css","modules/SideMenu/subcomponents/Subreddits/Subreddits.module.css","modules/Post/subcomponents/Text/Text.module.css","store/reducers/postReducer.js","store/reducers/postsReducer.js","store/reducers/subredditReducer.js","store/reducers/rootReducer.js","lib/utils.js","lib/image.js","lib/post.js","lib/subreddit.js","store/actions/subredditAction.js","store/actions/postsAction.js","modules/Header/Header.js","modules/Header/index.js","modules/SideMenu/subcomponents/Subreddit/Subreddit.js","modules/SideMenu/subcomponents/Subreddit/index.js","modules/SideMenu/subcomponents/Search/Search.js","modules/SideMenu/subcomponents/Search/index.js","modules/SideMenu/subcomponents/Subreddits/Subreddits.js","modules/SideMenu/subcomponents/Subreddits/index.js","modules/SideMenu/SideMenu.js","modules/SideMenu/index.js","modules/Post/subcomponents/Image/index.js","modules/Post/subcomponents/Image/Image.js","modules/Post/subcomponents/Text/index.js","modules/Post/subcomponents/Text/Text.js","modules/Post/subcomponents/Link/index.js","modules/Post/subcomponents/Link/Link.js","modules/Post/subcomponents/Video/index.js","modules/Post/subcomponents/Video/Video.js","lib/video.js","modules/Post/subcomponents/Gallery/index.js","modules/Post/subcomponents/Gallery/Gallery.js","modules/Comments/Comments.js","modules/Comments/index.js","modules/Post/Post.js","store/actions/postAction.js","modules/Post/index.js","modules/Posts/Posts.js","modules/Posts/index.js","modules/App/App.js","modules/App/index.js","index.js","store/store.js"],"names":["module","exports","INITIAL_STATE","byID","current","subscribed","subscribed_map","search_list","data","subreddit_search_error","combineReducers","comments","state","action","type","payload","id","posts","list_append","list","concat","subreddits","forEach","subreddit","subreddit_data","name","copy","obj","JSON","parse","stringify","UUID","replace","c","r","Math","random","toString","unescapeHTML","string","txt","document","createElement","innerHTML","value","GET","url","parser","opts","Promise","resolve","reject","fetch","then","response","json","e","catch","decodeImageURL","image_url","cleanPost","author","kind","children","post","title","empty","content","media","thumbnail","match","score_display","s","score","floor","toFixed","submitted_at","date","time_diff","Date","getTime","created_utc","awards","all_awardings","map","award","toLowerCase","count","key","parsePostData","is_self","isText","body","selftext","body_html","selftext_html","post_hint","indexOf","is_video","is_reddit_media_domain","isVideo","isImage","image","is_gallery","gallery_data","isGallery","images","image_map","media_metadata","items","item","media_id","mime_type","m","resolutions","p","res","width","x","height","y","source","u","console","error","parseSubreddit","description","public_description","display_name","banner","banner_img","icon","icon_img","subscribers","display","full","full_data","subs","fetchSubredditData","dispatch","action_data","fetchPosts","getState","limit","after","subreddit_current","is_current_subreddit","URL","Boolean","Header","searchCollection","props","length","join","onClick","currentTarget","dataset","listing","onSearch","clearSubredditSearchError","fetchSubreddit","search_string","this","className","subreddits_data","view_subscribed_classname","classnames","styles","disabled","listings","main_links","data-listing","search_label","search","spellCheck","onKeyDown","placeholder","subreddit_icon","src","alt","subreddit_title","Component","mapDispatchToProps","connect","Subreddit","onSubscribe","checked","subscribeSubreddit","checkbox","onCheckboxClick","task","push","filter","current_subreddit","SearchSubreddits","searchSubreddits","clearSearch","clearTimeout","search_timer","setTimeout","side_menu_styles","section","section_title","onKeyUp","sort","a","b","a_match","b_match","sortSubreddits","subreddits_list","parseSubreddits","defaultProps","Search","Subreddits","view_sub_classname","view_subscribed","Sidemenu","sidemenu","SideMenu","Image","is_media_max","media_max","setState","Text","dangerouslySetInnerHTML","__html","Link","link","href","target","rel","link_address","Video","ref_video","React","createRef","ref_audio","controls_ready","paused","muted","duration","current_time","volume","ready_to_play","video","audio","complete","ref_embedded_media","iframe","getElementsByTagName","iframe_ratio","clientWidth","secure_media","secure_media_embed","reddit_video","fallback_url","dash_split","split","getFallbackAudio","ref","onCanPlay","onTimeUpdate","currentTime","play","pause","controls","control","playpause_icon","bar_wrapper","progress_bar_wrapper","bar","left","getBoundingClientRect","per","pageX","new_time","progress","style","round","volume_icon","volume_bar_wrapper","volume_progress","Gallery","selected_image","window","innerHeight","full_size","wrapper","thumbnails","index","log","class_name","selected","renderSelectedImage","Comments","comment","even","comment_even","comment_odd","author_info","author_is_op","replies","renderComments","THUMBNAIL_ICON_MAP","text","gallery","ICON_MAP","default","Post","is_media_expanded","is_comments_expanded","onCommentsClick","bind","fetchPost","component","content_wrapper","hide","comments_wrapper","load_comments","fa_icon","thumbnail_image","thumbnail_subreddit","backgroundImage","thumbnail_icon","body_classname","body_empty","renderThumbnail","renderIcon","submission","subreddit_link","num_comments","renderMedia","article","article_data","comment_data","cleanComments","parent","even_layer","parsed_comment","marked","reply","Posts","onScroll","ceil","clientHeight","scrollTop","scrollHeight","load_more","INITIAL_LISTING","App","previous_state","localStorage","getItem","setSubreddits","header","articleList","sideMenu","store","createStore","rootReducer","applyMiddleware","thunk","subscribe","current_state","serializedState","setItem","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.214e514a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1ZCkS\",\"bar\":\"Post_bar__2ytou\",\"score\":\"Post_score__3J9Go\",\"thumbnail\":\"Post_thumbnail__2Mv8T\",\"thumbnail_image\":\"Post_thumbnail_image__aAX9N\",\"thumbnail_subreddit\":\"Post_thumbnail_subreddit__2Qpjq\",\"thumbnail_icon\":\"Post_thumbnail_icon__3_07y\",\"body\":\"Post_body__1tjlH\",\"body_empty\":\"Post_body_empty__1ZIC6\",\"title\":\"Post_title__1sUIr\",\"icon\":\"Post_icon__2-AFI\",\"submission\":\"Post_submission__2PLyZ\",\"comments\":\"Post_comments__1eQ7f\",\"load_comments\":\"Post_load_comments__3QYMw\",\"comments_wrapper\":\"Post_comments_wrapper__14RNb\",\"hide\":\"Post_hide__q3vp2\",\"content_wrapper\":\"Post_content_wrapper__3IKz1\",\"subreddit_link\":\"Post_subreddit_link__3RnEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"video\":\"Video_video__dTNKK\",\"controls\":\"Video_controls__2OmsP\",\"control\":\"Video_control__2X_9_\",\"playpause_icon\":\"Video_playpause_icon__1NxKN\",\"progress_bar_wrapper\":\"Video_progress_bar_wrapper__3-sIX\",\"volume_icon\":\"Video_volume_icon__1AJ08\",\"volume_bar_wrapper\":\"Video_volume_bar_wrapper__3MFfq\",\"bar_wrapper\":\"Video_bar_wrapper__f9bSt\",\"bar\":\"Video_bar__1-hGg\",\"progress\":\"Video_progress__1rbCl\",\"volume_progress\":\"Video_volume_progress__1yTqi\",\"current_time\":\"Video_current_time__3h2EC\",\"duration\":\"Video_duration__36FOi\",\"media\":\"Video_media__2ghAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_links\":\"Header_main_links__3lpuR\",\"listing\":\"Header_listing__3drQY\",\"disabled\":\"Header_disabled__3V8xT\",\"search_label\":\"Header_search_label__1_-nu\",\"search\":\"Header_search__1zI1g\",\"subreddit_current\":\"Header_subreddit_current__3kx1v\",\"subreddit_icon\":\"Header_subreddit_icon__2OO0L\",\"subreddit_title\":\"Header_subreddit_title__zjJCE\",\"subreddit_search_error\":\"Header_subreddit_search_error__1-kBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Comments_wrapper__h6tw3\",\"comments\":\"Comments_comments__3NgER\",\"comment_even\":\"Comments_comment_even__2U9nK\",\"comment_odd\":\"Comments_comment_odd__3wItb\",\"comment\":\"Comments_comment__3MfqI\",\"author_info\":\"Comments_author_info__2FkxD\",\"author_is_op\":\"Comments_author_is_op__wYCnL\",\"score\":\"Comments_score__1gShr\",\"body\":\"Comments_body__1B94B\",\"award\":\"Comments_award__yjfLH\",\"gold\":\"Comments_gold__6PfTT\",\"silver\":\"Comments_silver__3ggsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidemenu\":\"SideMenu_sidemenu__2GrsV\",\"title\":\"SideMenu_title__rRgxI\",\"section\":\"SideMenu_section__3Wl6k\",\"section_title\":\"SideMenu_section_title__3EIq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumbnails\":\"Gallery_thumbnails__3PGUn\",\"thumbnail\":\"Gallery_thumbnail__2pPAD\",\"selected\":\"Gallery_selected__x-JBu\",\"selected_image\":\"Gallery_selected_image__8Pk5t\",\"full_size\":\"Gallery_full_size__3cThD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subreddit\":\"Subreddit_subreddit__2lgPg\",\"checkbox\":\"Subreddit_checkbox__2UDbU\",\"title\":\"Subreddit_title__3_NX6\",\"subscribers\":\"Subreddit_subscribers__2uqEG\",\"checked\":\"Subreddit_checked__1MytN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2CBHV\",\"header\":\"App_header__SZGgc\",\"articleList\":\"App_articleList__1F2Yd\",\"sideMenu\":\"App_sideMenu__3EQTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Link_content__10cBw\",\"link\":\"Link_link__2vhKr\",\"link_address\":\"Link_link_address__15p7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"media\":\"Image_media__2V2Pq\",\"media_max\":\"Image_media_max__99lxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Posts_wrapper__11-4S\",\"load_more\":\"Posts_load_more__1Ku_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__19ult\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view_subscribed\":\"Subreddits_view_subscribed__3IgSK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Text_content__1lINs\"};","const INITIAL_STATE = {\r\n    byID: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'post': {\r\n            const { byID = {} } = state;\r\n            byID[action.payload.data.id] = action.payload.comments;\r\n            return { byID };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    current: {},\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'posts': {\r\n            if (action.payload.list_append) {\r\n                return {\r\n                    ...state,\r\n                    current: {\r\n                        ...state.current,\r\n                        list_append: true,\r\n                        list: state.current.list.concat(action.payload.list),\r\n                    },\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                current: action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    subscribed: [],\r\n    subscribed_map: {},\r\n    search_list: [],\r\n    data: {},\r\n    subreddit_search_error: false,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'subscribe_subreddit':\r\n            let subscribed_map = {};\r\n            (action.payload || []).forEach((subreddit) => {\r\n                subscribed_map[subreddit.id] = subreddit;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                subscribed: action.payload,\r\n                subscribed_map: subscribed_map\r\n            };\r\n\r\n        case 'subreddit_data': {\r\n            const data = state.data;\r\n            const subreddit_data = action.payload;\r\n            data[subreddit_data.name] = subreddit_data;\r\n\r\n            return {\r\n                ...state,\r\n                data,\r\n            };\r\n        }\r\n\r\n        case 'search_subreddits': {\r\n            // Subreddits from the search have icon and banner data and can be\r\n            // added to the data map\r\n            const data = state.data;\r\n            const search_list = action.payload;\r\n\r\n            search_list.forEach((subreddit_data) => {\r\n                data[subreddit_data.name] = subreddit_data;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                search_list,\r\n                data,\r\n            };\r\n        }\r\n\r\n        case 'clear_search': {\r\n            return {\r\n                ...state,\r\n                search_list: [],\r\n            };\r\n        }\r\n\r\n        case 'subreddit_search_error': {\r\n            return {\r\n                ...state,\r\n                subreddit_search_error: true,\r\n            };\r\n        }\r\n\r\n        case 'subreddit_search_clear': {\r\n            return {\r\n                ...state,\r\n                subreddit_search_error: false,\r\n            };\r\n        }\r\n\r\n        case 'set_subreddits': {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport postReducer from './postReducer';\r\nimport postsReducer from './postsReducer';\r\nimport subredditReducer from './subredditReducer';\r\n\r\nexport default combineReducers({\r\n    comments: postReducer,\r\n    posts: postsReducer,\r\n    subreddits: subredditReducer\r\n});\r\n","export function copy (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function UUID () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = (c === 'x') ? r : ((r & 0x3) | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function unescapeHTML (string) {\r\n    const txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = string;\r\n    return txt.value;\r\n}\r\n\r\nexport function GET (url, parser, opts = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            fetch(url, opts).then(response => response.json()).then((response) => {\r\n                try {\r\n                    resolve(parser(response));\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            }).catch((e) => {\r\n                reject(e)\r\n            });\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n","export function imageIDtoURL (image_id, mime_type) {\r\n    // https://i.redd.it/<ID>.<M>\r\n    return `https://i.redd.it/${image_id}.${mime_type.replace('image/', '')}`;\r\n}\r\n\r\nexport function decodeImageURL (image_url) {\r\n    return image_url.replace(/&amp;/g, '&');\r\n}\r\n","import marked from 'marked';\r\nimport {\r\n    UUID,\r\n    unescapeHTML,\r\n} from './utils';\r\nimport {\r\n    decodeImageURL,\r\n} from './image';\r\n\r\n/*\r\n    Caveats I have noticed from looking at reddit post json:\r\n        title:\r\n            Not everything will have a title, like some askreddit threads.\r\n        url: multipurpose, link to an image or an article or a video\r\n            Type needs to be figured out by looking at a couple of other fields\r\n*/\r\n\r\nfunction parsePostData (data) {\r\n    return {\r\n        ...data,\r\n\r\n        title: (data.title || '').replace(/&amp;/g, '&'),\r\n        empty: false, // Mainly used for text to know if there is body content\r\n        type: 'none',\r\n        content: {},\r\n        media: {},\r\n\r\n        // TODO: This info is important and probably shouldnt be lost\r\n        thumbnail: (!data.thumbnail.match(/self|spoiler|default/)) ? data.thumbnail : null,\r\n\r\n        score_display: ((s) => {\r\n            if (s > 100000) return Math.floor(s / 1000) + 'K';\r\n            if (s > 10000) return (s / 1000).toFixed(1) + 'K';\r\n            return s;\r\n        })(data.score),\r\n\r\n        submitted_at: ((date) => { // date is in seconds\r\n            let time_diff = (new Date()).getTime() - (new Date( date * 1000)).getTime();\r\n            time_diff = time_diff / 1000 / 60; // milli -> sec -> min\r\n            // TODO: Should probably add \"days\" as a possibility\r\n            if (time_diff > 60) return Math.floor(time_diff / 60) + ' hours';\r\n            return Math.floor(time_diff) + ' minutes';\r\n        })(data.created_utc),\r\n\r\n        awards: (data.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                // React component key, award.id is not unique enough\r\n                key: `${award.id}-${UUID()}`,\r\n            };\r\n        })\r\n    };\r\n}\r\n\r\nfunction isText (data) {\r\n    return data.is_self;\r\n}\r\n\r\nfunction isImage (data) {\r\n    // Check the post_hint for a tip\r\n    if (data.post_hint && data.post_hint.indexOf('image') !== -1) return true;\r\n    // Do a basic check on the extension of the url\r\n    if (data.url && data.url.match(/.jpg|.jpeg|.png|.bmp|.gif/)) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isVideo (data) {\r\n    // Check the post_hint\r\n    if (data.post_hint && data.post_hint.indexOf('video') !== -1) return true;\r\n\r\n    if (data.url && data.url.match(/.gifv/)) return true;\r\n\r\n    // Do a basic check on the common video fields\r\n    if (data.url && data.is_video && data.is_reddit_media_domain) return true;\r\n    // There are probably more things to check\r\n    return false;\r\n}\r\n\r\nfunction isGallery (data) {\r\n    if (data.is_gallery) return true;\r\n    if (data.url.indexOf('gallery') !== -1 && data.gallery_data) return true;\r\n    return false;\r\n}\r\n\r\nexport function cleanPost (data) {\r\n    try {\r\n        if (!data.author && data.kind) {\r\n            data = data.data.children[0].data;\r\n        }\r\n\r\n        let post = parsePostData(data);\r\n\r\n        if (isText(data)) {\r\n            post.type = 'text';\r\n            post.content.body = data.selftext;\r\n            post.content.body_html = data.selftext_html;\r\n            if (!post.content.body && !post.content.body_html) {\r\n                post.empty = true;\r\n            }\r\n        } else if (isVideo(data)) {\r\n            post.type = 'video';\r\n            // post.media.video = data.secure_media || data.media;\r\n        } else if (isImage(data)) {\r\n            post.type = 'image';\r\n            post.media.image = data.url;\r\n        } else if(isGallery(data)) {\r\n            post.type = 'gallery';\r\n            post.media.images = [];\r\n            const image_map = post.media_metadata || {};\r\n            post.media.images = post.gallery_data.items.map((item) => {\r\n                const id = image_map[item.media_id].id;\r\n                const mime_type = image_map[item.media_id].m;\r\n                // const source = imageIDtoURL(id, mime_type);\r\n                return {\r\n                    id,\r\n                    mime_type,\r\n                    // source,\r\n                    resolutions: image_map[item.media_id].p.map((res) => {\r\n                        return {\r\n                            width: res.x,\r\n                            height: res.y,\r\n                            source: decodeImageURL(res.u),\r\n                        };\r\n                    }),\r\n                    thumbnail: {\r\n                        source: decodeImageURL(image_map[item.media_id].p[0].u),\r\n                    },\r\n                    width: image_map[item.media_id].s.x,\r\n                    height: image_map[item.media_id].s.y,\r\n                    source: decodeImageURL(image_map[item.media_id].s.u),\r\n                };\r\n            });\r\n        } else if (data.url) {\r\n            post.type = 'link';\r\n        }\r\n\r\n        return post;\r\n    } catch (e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function cleanComments (comment, parent, even_layer) {\r\n    if (!comment.body) return;\r\n\r\n    let parsed_comment = {\r\n        id: comment.id,\r\n        key: `${comment.id}_${UUID()}`,\r\n        author: comment.author,\r\n        body: marked(unescapeHTML(comment.body_html)),\r\n        score: comment.score,\r\n        awards: (comment.all_awardings || []).map((award) => {\r\n            return {\r\n                name: award.name.toLowerCase(),\r\n                count: award.count,\r\n                key: `${award.id}-${UUID()}`\r\n            };\r\n        }),\r\n        even: even_layer\r\n    };\r\n    parent.push(parsed_comment);\r\n\r\n    if (comment.replies && comment.replies.data.children) {\r\n        parsed_comment.replies = [];\r\n        comment.replies.data.children.forEach((reply) => {\r\n            cleanComments(reply.data, parsed_comment.replies, !even_layer);\r\n        });\r\n    }\r\n}\r\n","export function parseSubreddit (data) {\r\n    let subreddit = {\r\n        id: data.name,\r\n        // key: data.display_name.toLowerCase() + '_' + (new Date()).getTime(),\r\n        description: data.public_description,\r\n        name: data.display_name.toLowerCase(),\r\n        display_name: data.display_name,\r\n        url: data.url,\r\n        banner: data.banner_img,\r\n        icon: data.icon_img,\r\n        subscribers: {\r\n            display: data.subscribers,\r\n            full: data.subscribers\r\n        },\r\n        full_data: data,\r\n    };\r\n\r\n    const subs = subreddit.subscribers.full;\r\n    if (subs > 1000000) {\r\n        subreddit.subscribers.display = (subs / 100000).toFixed(1) + 'M';\r\n    } else if (subs > 100000) {\r\n        subreddit.subscribers.display = Math.floor(subs / 1000) + 'K';\r\n    } else if (subs > 10000) {\r\n        subreddit.subscribers.display = (subs / 1000).toFixed(1) + 'K';\r\n    }\r\n\r\n    return subreddit;\r\n}\r\n\r\nexport function parseSubreddits (subreddits_list = []) {\r\n    return subreddits_list.map((item) => {\r\n        const { data = {} } = item;\r\n        return parseSubreddit(data);\r\n    });\r\n};\r\n\r\nexport function sortSubreddits (subreddits, search_string) {\r\n    subreddits.sort((a, b) => {\r\n        let a_match = a.name.indexOf(search_string) !== -1;\r\n        let b_match = b.name.indexOf(search_string) !== -1;\r\n\r\n        if (a_match && b_match) {\r\n            // they both match the search string, the one with more subscribers is first\r\n            return b.subscribers.full - a.subscribers.full;\r\n        } else if (a_match) {\r\n            return -1; // negative puts a first\r\n        } else if (b_match) {\r\n            return 1; // positive puts b first\r\n        } else {\r\n            return b.subscribers.full - a.subscribers.full;\r\n        }\r\n    });\r\n    return subreddits;\r\n}\r\n","import {\r\n    GET,\r\n    copy\r\n} from '../../lib/utils';\r\n\r\nimport {\r\n    parseSubreddit,\r\n    parseSubreddits,\r\n    sortSubreddits,\r\n} from '../../lib/subreddit';\r\n\r\nconst SHOW_MATURE = false;\r\n\r\nexport const searchSubreddits = (search_string) => (dispatch) => {\r\n    let URL = `https://www.reddit.com/subreddits/search.json?q=${search_string}`;\r\n    if (SHOW_MATURE) URL += '&include_over_18=on';\r\n    GET(URL, (response) => {\r\n        return sortSubreddits(parseSubreddits(response.data.children), search_string);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'search_subreddits',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const clearSearch = () => (dispatch) => {\r\n    dispatch({\r\n        type: 'clear_search'\r\n    });\r\n}\r\n\r\nexport const fetchSubredditData = (subreddit) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${subreddit.name}/about.json`;\r\n    GET(URL, (response) => {\r\n        return parseSubreddit(response.data);\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'subreddit_data',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n\r\nexport const subscribeSubreddit = (subreddit, task) => (dispatch, getState) => {\r\n    let subreddits = copy((getState().subreddits || {}).subscribed || []);\r\n\r\n    if (task === 'add') {\r\n        subreddits.push(subreddit);\r\n    }\r\n    if (task === 'remove') {\r\n        subreddits = subreddits.filter((current_subreddit) => {\r\n            return current_subreddit.id !== subreddit.id;\r\n        });\r\n    }\r\n\r\n    dispatch({\r\n        type: 'subscribe_subreddit',\r\n        payload: subreddits\r\n    });\r\n}\r\n\r\nexport const setSubreddits = (subreddits) => (dispatch) => {\r\n    dispatch({\r\n        type: 'set_subreddits',\r\n        payload: subreddits,\r\n    });\r\n}\r\n","import { GET, copy } from '../../lib/utils';\r\nimport { cleanPost } from '../../lib/post';\r\n\r\nimport { fetchSubredditData } from './subredditAction';\r\n\r\n/*\r\n    /r/pics+gifs+todayilearned/new.json\r\n        ?count=count of before/after post\r\n        ?limit=number of posts wanted in return\r\n        ?after=post.id\r\n        ?before=post.id\r\n*/\r\n\r\nexport const fetchSubreddit = (subreddit, opts = {}) => (dispatch, getState) => {\r\n    subreddit.name = subreddit.title.toLowerCase();\r\n\r\n    if (subreddit.type === 'subreddit') {\r\n        const subreddits_data = copy((getState().subreddits || {}).data || {});\r\n        const subreddit_data = subreddits_data[subreddit.name];\r\n        if (!subreddit_data) {\r\n            dispatch(fetchSubredditData(subreddit));\r\n        } else {\r\n            subreddit = subreddit_data;\r\n        }\r\n    }\r\n\r\n    const URL = `https://www.reddit.com/${subreddit.url}.json?limit=25`;\r\n\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            subreddit,\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            }),\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data,\r\n        });\r\n        dispatch({\r\n            type: 'subreddit_search_clear',\r\n        });\r\n    }).catch((error) => {\r\n        dispatch({\r\n            type: 'subreddit_search_error',\r\n        });\r\n    });\r\n}\r\n\r\nexport const clearSubredditSearchError = () => (dispatch) => {\r\n    dispatch({\r\n        type: 'subreddit_search_clear',\r\n    });\r\n}\r\n\r\nexport const fetchPosts = (subreddit, opts = {}) => (dispatch, getState) => {\r\n    const {\r\n        limit = 25,\r\n        count,\r\n        after,\r\n    } = opts;\r\n\r\n    subreddit.name = subreddit.name || subreddit.title.toLowerCase();\r\n    subreddit.type = subreddit.type || 'subreddit';\r\n\r\n    const subreddit_current = copy(getState().posts.current.subreddit || {});\r\n    const is_current_subreddit = subreddit_current && subreddit_current.name === subreddit.name;\r\n\r\n    if (subreddit.type === 'subreddit') {\r\n        const subreddits_data = copy((getState().subreddits || {}).data || {});\r\n        const subreddit_data = subreddits_data[subreddit.name];\r\n        if (!subreddit_data) {\r\n            dispatch(fetchSubredditData(subreddit));\r\n        } else {\r\n            subreddit = subreddit_data;\r\n        }\r\n    }\r\n\r\n    let URL = `https://www.reddit.com/${subreddit.url}.json?limit=${limit}`;\r\n    if (count) URL += `&count=${count}`;\r\n    if (after) URL += `&after=${after}`;\r\n\r\n    GET(URL, (response) => {\r\n        return {\r\n            title: subreddit.title || subreddit.name,\r\n            subreddit,\r\n            list_append: (is_current_subreddit && Boolean(after)),\r\n            list: response.data.children.map((item) => {\r\n                return cleanPost(item.data);\r\n            }),\r\n        };\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'posts',\r\n            payload: action_data\r\n        });\r\n    }).catch((error) => {\r\n        // dispatch({\r\n        //     type: 'posts_error',\r\n        //     error,\r\n        // });\r\n    });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport {\r\n    fetchSubreddit,\r\n    fetchPosts,\r\n    clearSubredditSearchError,\r\n} from '../../store/actions/postsAction';\r\n\r\nimport styles from './Header.module.css';\r\n\r\nclass Header extends Component {\r\n    searchCollection = (e) => {\r\n        const {\r\n            subscribed,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        if (!subscribed.length) return;\r\n\r\n        fetchPosts({\r\n            title: 'Subscribed',\r\n            type: 'listing',\r\n            url: '/r/' + subscribed.map(s => s.name).join('+'),\r\n        });\r\n    }\r\n\r\n    onClick = (e) => {\r\n        this.props.fetchPosts({\r\n            title: e.currentTarget.dataset.listing,\r\n            type: 'listing',\r\n            url: e.currentTarget.dataset.listing\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        const {\r\n            clearSubredditSearchError,\r\n            fetchSubreddit,\r\n        } = this.props;\r\n        clearSubredditSearchError();\r\n\r\n        if (e.key.toLowerCase() !== 'enter') return;\r\n        const search_string = e.currentTarget.value;\r\n        fetchSubreddit({\r\n            title: e.currentTarget.value,\r\n            type: 'subreddit',\r\n            url: '/r/' + search_string,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            className,\r\n            posts = {},\r\n            subscribed,\r\n            subreddits_data,\r\n            subreddit_search_error,\r\n        } = this.props;\r\n        const {\r\n            title,\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        const subreddit_data = subreddits_data[subreddit.name] || {};\r\n\r\n        const view_subscribed_classname = classnames(styles.listing, {\r\n            [styles.disabled]: !subscribed.length,\r\n        });\r\n\r\n        return (\r\n            <header className={classnames(styles.listings, className)}>\r\n                <div className={styles.main_links}>\r\n                    <span onClick={this.onClick} data-listing=\"best\" className={styles.listing}>Best</span>\r\n                    <span onClick={this.onClick} data-listing=\"top\" className={styles.listing}>Top</span>\r\n                    <span onClick={this.onClick} data-listing=\"new\" className={styles.listing}>New</span>\r\n                    <span onClick={this.onClick} data-listing=\"hot\" className={styles.listing}>Hot</span>\r\n                    <span onClick={this.searchCollection} data-listing=\"subscribed\" className={view_subscribed_classname}>Subscribed</span>\r\n                    <span className={styles.search_label}>/r/</span>\r\n                    <input className={styles.search} spellCheck=\"false\" onKeyDown={this.onSearch} placeholder=\"subreddit\"/>\r\n                    {subreddit_search_error && <span className={styles.subreddit_search_error}>SUBREDDIT NOT FOUND</span>}\r\n                </div>\r\n                <div className={styles.subreddit_current}>\r\n                    {subreddit_data.icon && <img className={styles.subreddit_icon} src={subreddit_data.icon} alt=\"Subreddit Icon\" />}\r\n                    <span className={styles.subreddit_title}>{title || ''}</span>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits_data: state.subreddits.data,\r\n        subscribed: state.subreddits.subscribed || [],\r\n        subreddit_search_error: state.subreddits.subreddit_search_error || false,\r\n        posts: state.posts.current,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    fetchSubreddit,\r\n    clearSubredditSearchError,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../../../store/actions/postsAction';\r\nimport { subscribeSubreddit } from '../../../../store/actions/subredditAction';\r\n\r\nimport styles from './Subreddit.module.css';\r\n\r\nclass Subreddit extends Component {\r\n    onClick = (e) => {\r\n        this.props.fetchPosts(this.props.subreddit);\r\n    }\r\n\r\n    onSubscribe = (e) => {\r\n        const checked = e.currentTarget.checked;\r\n        this.props.subscribeSubreddit(this.props.subreddit, checked ? 'add' : 'remove');\r\n    }\r\n\r\n    onCheckboxClick (checked) {\r\n        this.props.subscribeSubreddit(this.props.subreddit, checked ? 'add' : 'remove');\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            checked,\r\n            subreddit,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.subreddit}>\r\n                {/* <input\r\n                    type=\"checkbox\"\r\n                    checked={this.props.checked}\r\n                    onChange={this.onSubscribe}\r\n                    className={styles.checkbox}\r\n                /> */}\r\n                <div\r\n                    className={classnames(styles.checkbox, {\r\n                        [styles.checked]: checked,\r\n                    })}\r\n                    onClick={() => {\r\n                        this.onCheckboxClick(!checked);\r\n                    }}\r\n                />\r\n                <span onClick={this.onClick} className={styles.title}>{subreddit.display_name}</span>\r\n                <span className={styles.subscribers}>{subreddit.subscribers.display}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    subscribeSubreddit,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Subreddit);\r\n","import Subreddit from './Subreddit';\r\n\r\nexport default Subreddit;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    searchSubreddits,\r\n    clearSearch,\r\n} from '../../../../store/actions/subredditAction';\r\n\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass SearchSubreddits extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.search_timer = null;\r\n    }\r\n\r\n    search = (e) => {\r\n        const {\r\n            searchSubreddits,\r\n            clearSearch,\r\n        } = this.props;\r\n\r\n        const search_string = e.currentTarget.value;\r\n\r\n        if (!search_string) {\r\n            clearTimeout(this.search_timer);\r\n            this.search_timer = null;\r\n            clearSearch();\r\n            return;\r\n        }\r\n\r\n        if (e.key.toLowerCase() !== 'enter') {\r\n            clearTimeout(this.search_timer);\r\n            this.search_timer = null;\r\n            this.search_timer = setTimeout(() => {\r\n                searchSubreddits(search_string);\r\n            }, 300);\r\n        } else {\r\n            searchSubreddits(search_string);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            search_list,\r\n            subscribed_map,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div className={side_menu_styles.section_title}>Search:</div>\r\n                <input className={styles.search} spellCheck=\"false\" onKeyUp={this.search} placeholder=\"subreddit name\"/>\r\n\r\n                {(search_list || []).map((subreddit) => {\r\n                    return (\r\n                        <Subreddit\r\n                            key={`search_${subreddit.id}`}\r\n                            checked={!!subscribed_map[subreddit.id]}\r\n                            subreddit={subreddit}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        search_list: state.subreddits.search_list,\r\n        subscribed_map: state.subreddits.subscribed_map,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    searchSubreddits,\r\n    clearSearch,\r\n};\r\n\r\nSearchSubreddits.defaultProps = {\r\n    subreddits: [],\r\n    subscribed_map: {},\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSubreddits);\r\n","import Search from './Search';\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport {\r\n    fetchPosts,\r\n} from '../../../../store/actions/postsAction';\r\n\r\nimport styles from './Subreddits.module.css';\r\nimport side_menu_styles from '../../SideMenu.module.css';\r\n\r\nimport Subreddit from '../Subreddit';\r\n\r\nclass Subreddits extends Component {\r\n    render() {\r\n        const {\r\n            subscribed,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        const view_sub_classname = classnames(side_menu_styles.section_title, {\r\n            [styles.view_subscribed]: subscribed.length,\r\n        });\r\n\r\n        return (\r\n            <div className={side_menu_styles.section}>\r\n                <div\r\n                    className={view_sub_classname}\r\n                    onClick={() => {\r\n                        if (!subscribed.length) return;\r\n                        fetchPosts({\r\n                            title: 'Subscribed',\r\n                            type: 'listing',\r\n                            url: '/r/' + subscribed.map(s => s.name).join('+'),\r\n                        });\r\n                    }}\r\n                >Subscribed:</div>\r\n                {(this.props.subscribed || []).map((subreddit) => {\r\n                    return <Subreddit key={`subbed_${subreddit.id}`} checked={true} subreddit={subreddit} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Subreddits);\r\n","import Subreddits from './Subreddits';\r\n\r\nexport default Subreddits;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport Search from './subcomponents/Search';\r\nimport Subreddits from './subcomponents/Subreddits';\r\n\r\nimport styles from './SideMenu.module.css';\r\n\r\nclass Sidemenu extends Component {\r\n    render() {\r\n        const {\r\n            className\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={classnames(styles.sidemenu, className)}>\r\n                <div className={styles.title}>Subreddits</div>\r\n                <Subreddits subscribed={this.props.subscribed} />\r\n                <Search />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscribed: state.subreddits.subscribed\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Sidemenu);","import SideMenu from './SideMenu';\r\n\r\nexport default SideMenu;","import Image from './Image';\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Image.module.css';\r\n\r\nclass Image extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n        };\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n        const {\r\n            is_media_max,\r\n        } = this.state;\r\n\r\n        return (\r\n            <img\r\n                alt=\"Parse for text\"\r\n                className={classnames(styles.media, {\r\n                    [styles.media_max]: is_media_max,\r\n                })}\r\n                src={post.media.image}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        )\r\n    };\r\n}\r\n\r\nexport default Image;\r\n","import Text from './Text';\r\n\r\nexport default Text;\r\n","import React, { Component } from 'react';\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\n\r\nimport styles from './Text.module.css';\r\n\r\nclass Text extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={styles.content}\r\n                dangerouslySetInnerHTML={{ __html: unescapeHTML(post.content.body_html) }}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nexport default Text;\r\n","import Link from './Link';\r\n\r\nexport default Link;\r\n","import React, { Component } from 'react';\r\n\r\nimport styles from './Link.module.css';\r\n\r\nclass Link extends Component {\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className={styles.content}>\r\n                <a className={styles.link} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">Go To Article</a>\r\n                <a className={styles.link_address} href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">{post.url}</a>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Link;\r\n","import Video from './Video';\r\n\r\nexport default Video;\r\n","import React, { Component, Fragment } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport { unescapeHTML } from '../../../../lib/utils';\r\nimport { getFallbackAudio } from '../../../../lib/video';\r\n// import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\n\r\nimport styles from './Video.module.css';\r\n\r\nclass Video extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref_video = React.createRef();\r\n        this.ref_audio = React.createRef();\r\n\r\n        this.state = {\r\n            controls_ready: false,\r\n            paused: true,\r\n            muted: false,\r\n            duration: null,\r\n            current_time: null,\r\n            volume: 0.5,\r\n        };\r\n\r\n        this.ready_to_play = {\r\n            video: false,\r\n            audio: false,\r\n            complete: false,\r\n        };\r\n\r\n        this.ref_embedded_media = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (!this.ref_embedded_media || !this.ref_embedded_media.current) return;\r\n\r\n        const iframe = this.ref_embedded_media.current.getElementsByTagName('iframe')[0];\r\n        const iframe_width = iframe.width;\r\n        const iframe_height = iframe.height;\r\n        const iframe_ratio = iframe_width / iframe_height;\r\n\r\n        iframe.width = this.ref_embedded_media.current.clientWidth;\r\n        iframe.height = this.ref_embedded_media.current.clientWidth / iframe_ratio;\r\n    }\r\n\r\n    onCanPlay (type) {\r\n        const {\r\n            volume,\r\n        } = this.state;\r\n\r\n        this.ready_to_play[type] = true;\r\n        if (this.ready_to_play.video && this.ready_to_play.audio && !this.ready_to_play.complete) {\r\n            // We only want this to fire the first time the video and audio are ready\r\n            // and not after things like clicking on the progress bar\r\n            this.ready_to_play.complete = true;\r\n            this.ref_audio.current.volume = volume;\r\n            this.setState({\r\n                controls_ready: true,\r\n                duration: this.ref_video.current.duration,\r\n                current_time: 0,\r\n            });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post = {},\r\n        } = this.props;\r\n        const {\r\n            controls_ready,\r\n            paused,\r\n            muted,\r\n            current_time,\r\n            duration,\r\n            volume,\r\n        } = this.state;\r\n        const {\r\n            secure_media = {},\r\n            secure_media_embed = {}\r\n        } = post;\r\n\r\n        if (secure_media.reddit_video) {\r\n            const video = secure_media.reddit_video.fallback_url;\r\n            const audio = getFallbackAudio(video);\r\n\r\n            return (\r\n                <Fragment>\r\n                    <video\r\n                        className={styles.video}\r\n                        ref={this.ref_video}\r\n                        src={video}\r\n                        onCanPlay={() => {\r\n                            this.onCanPlay('video');\r\n                        }}\r\n                        onTimeUpdate={() => {\r\n                            this.setState({\r\n                                current_time: this.ref_video.current.currentTime,\r\n                            });\r\n                        }}\r\n                        onClick={() => {\r\n                            if (this.ref_video.current.paused) {\r\n                                this.ref_video.current.play();\r\n                                this.ref_audio.current.play();\r\n                                this.setState({\r\n                                    paused: false,\r\n                                });\r\n                            } else {\r\n                                this.ref_video.current.pause();\r\n                                this.ref_audio.current.pause();\r\n                                this.setState({\r\n                                    paused: true,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    <audio\r\n                        className={styles.audio}\r\n                        ref={this.ref_audio}\r\n                        src={audio}\r\n                        volume={volume}\r\n                        onCanPlay={() => {\r\n                            this.onCanPlay('audio');\r\n                        }}\r\n                    />\r\n                    {controls_ready && (\r\n                        <div className={styles.controls}>\r\n                            <i\r\n                                className={classnames(styles.control, styles.playpause_icon,{\r\n                                    \"fas fa-pause\": !paused,\r\n                                    \"fas fa-play\": paused,\r\n                                })}\r\n                                onClick={() => {\r\n                                    if (this.ref_video.current.paused) {\r\n                                        this.ref_video.current.play();\r\n                                        this.ref_audio.current.play();\r\n                                        this.setState({\r\n                                            paused: false,\r\n                                        });\r\n                                    } else {\r\n                                        this.ref_video.current.pause();\r\n                                        this.ref_audio.current.pause();\r\n                                        this.setState({\r\n                                            paused: true,\r\n                                        });\r\n                                    }\r\n                                }}\r\n                            />\r\n                            <div className={classnames(styles.bar_wrapper, styles.progress_bar_wrapper)}>\r\n                                <div className={styles.bar} onClick={(e) =>{\r\n                                    const rect = e.currentTarget.getBoundingClientRect();\r\n                                    const { left } = rect;\r\n\r\n                                    const x_diff = e.pageX - left;\r\n                                    const per = x_diff / e.currentTarget.clientWidth;\r\n                                    const new_time = duration * per;\r\n\r\n                                    if (new_time < 0) new_time = 0;\r\n                                    if (new_time > this.duration) new_time = this.duration;\r\n\r\n                                    this.ref_video.current.currentTime = new_time;\r\n                                    this.ref_audio.current.currentTime = new_time;\r\n\r\n                                    this.setState({\r\n                                        current_time: new_time,\r\n                                    });\r\n                                }}>\r\n                                    <div className={styles.progress} style={{\r\n                                        width: `${(current_time / duration) * 100}%`,\r\n                                    }} />\r\n                                </div>\r\n                                <div className={styles.current_time}>{Math.round(current_time)}</div>\r\n                                <div className={styles.duration}>{Math.round(duration)}</div>\r\n                            </div>\r\n                            <i\r\n                                className={classnames(styles.control, styles.volume_icon, {\r\n                                    \"fas fa-volume-off\": !muted,\r\n                                    \"fas fa-volume-mute\": muted,\r\n                                })}\r\n                                onClick={() => {\r\n                                    this.ref_audio.current.muted = !this.ref_audio.current.muted;\r\n                                    this.setState({\r\n                                        muted: this.ref_audio.current.muted,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <div className={classnames(styles.bar_wrapper, styles.volume_bar_wrapper)}>\r\n                                <div className={styles.bar} onClick={(e) =>{\r\n                                    const rect = e.currentTarget.getBoundingClientRect();\r\n                                    const { left } = rect;\r\n\r\n                                    const x_diff = e.pageX - left;\r\n                                    const per = x_diff / e.currentTarget.clientWidth;\r\n\r\n                                    if (per < 0) per = 0;\r\n                                    if (per > 1) per = 1;\r\n\r\n                                    this.ref_audio.current.volume = per;\r\n\r\n                                    this.setState({\r\n                                        volume: per,\r\n                                    });\r\n                                }}>\r\n                                    <div className={classnames(styles.progress, styles.volume_progress)} style={{\r\n                                        width: `${volume * 100}%`,\r\n                                    }} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Fragment>\r\n            );\r\n        }\r\n\r\n        if (secure_media_embed.content) {\r\n            return (\r\n                <div\r\n                    className={styles.media}\r\n                    dangerouslySetInnerHTML={{ __html: unescapeHTML(post.secure_media_embed.content) }}\r\n                    ref={this.ref_embedded_media}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Video;\r\n","export function getFallbackAudio (fallback_url) {\r\n    const dash_split = fallback_url.split('DASH');\r\n    return `${dash_split[0]}DASH_audio.mp4`;\r\n}\r\n","import Gallery from './Gallery';\r\n\r\nexport default Gallery;\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Gallery.module.css';\r\n\r\nclass Gallery extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_max: false,\r\n            selected_image: null,\r\n        };\r\n    }\r\n\r\n    renderSelectedImage () {\r\n        const {\r\n            is_media_max,\r\n            selected_image,\r\n        } = this.state;\r\n\r\n        if (!selected_image) return null;\r\n\r\n        let source = selected_image.source;\r\n        if (!is_media_max) {\r\n            // Find the image with the biggest height still\r\n            // smaller than the window\r\n            selected_image.resolutions.forEach((res) => {\r\n                if (res.height <= window.innerHeight) {\r\n                    source = res.source;\r\n                }\r\n            });\r\n        }\r\n\r\n        return (\r\n            <img\r\n                alt=\"Main\"\r\n                className={classnames(styles.selected_image, {\r\n                    [styles.full_size]: is_media_max,\r\n                })}\r\n                src={source}\r\n                onClick={() => {\r\n                    this.setState({\r\n                        is_media_max: !is_media_max,\r\n                    });\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n        const {\r\n            selected_image,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.thumbnails}>\r\n                    {post.media.images.map((image, index) => {\r\n                        console.log(selected_image);\r\n                        const class_name = classnames(styles.thumbnail, {\r\n                            [styles.selected]: image.id === (selected_image || {}).id,\r\n                        });\r\n                        return (\r\n                            <img\r\n                                alt={`Thumnbnail ${index}`}\r\n                                key={`image_key_${image.id}`}\r\n                                className={class_name}\r\n                                src={image.thumbnail.source}\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        is_media_max: false,\r\n                                        selected_image: image,\r\n                                    });\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n                {this.renderSelectedImage()}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport styles from './Comments.module.css';\r\n\r\nclass Comments extends Component {\r\n    renderComments (comments) {\r\n        if (!comments || !comments.length) return;\r\n        const { post } = this.props;\r\n\r\n        return comments.map((comment) => {\r\n            return (\r\n                <div key={comment.key} className={`${styles.comment} ${comment.even ? styles.comment_even : styles.comment_odd}`}>\r\n                    <div className={styles.author_info}>\r\n                        <span className={classnames(styles.author, {\r\n                            [styles.author_is_op]: post.author === comment.author,\r\n                        })}>{comment.author}</span>\r\n                        <span className={styles.score}>{comment.score} points</span>\r\n                        {(comment.awards || []).map((award) => {\r\n                            if (award.name.match(/gold|silver/)) {\r\n                                return <div key={award.key} className={`${styles.award} ${styles[award.name]}`}>{award.count}</div>\r\n                            }\r\n                            return <div key={award.key} className={styles.award}>{award.name}</div>\r\n                        })}\r\n                    </div>\r\n                    <div\r\n                        className={styles.body}\r\n                        dangerouslySetInnerHTML={{ __html: comment.body }}\r\n                    />\r\n                    {((comment.replies || []).length > 0) &&\r\n                        <div className={styles.comments}>{this.renderComments(comment.replies)}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {this.renderComments(this.props.comments)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, null)(Comments);\r\n","import Comments from './Comments';\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPost } from '../../store/actions/postAction';\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Image from './subcomponents/Image';\r\nimport Text from './subcomponents/Text';\r\nimport Link from './subcomponents/Link';\r\nimport Video from './subcomponents/Video';\r\nimport Gallery from './subcomponents/Gallery';\r\n\r\nimport Comments from '../Comments';\r\n\r\nimport styles from './Post.module.css';\r\n\r\nconst THUMBNAIL_ICON_MAP = {\r\n    link: 'far fa-newspaper',\r\n    text: 'far fa-comment-alt',\r\n    // image: 'far fa-file-image',\r\n    // video: 'far fa-file-video',\r\n    // text: 'fas fa-align-left',\r\n    image: 'far fa-image',\r\n    video: 'fas fa-video',\r\n    // link: 'fas fa-external-link-alt',\r\n    gallery: 'far fa-images',\r\n};\r\n\r\nconst ICON_MAP = {\r\n    text: 'fas fa-align-left',\r\n    image: 'far fa-image',\r\n    video: 'fas fa-video',\r\n    link: 'fas fa-external-link-alt',\r\n    gallery: 'far fa-images',\r\n    default: 'fa-question-circle',\r\n};\r\n\r\nclass Post extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            is_media_expanded: false,\r\n            is_comments_expanded: false,\r\n        };\r\n\r\n        this.onCommentsClick = this.onCommentsClick.bind(this);\r\n    }\r\n\r\n    onClick = () => {\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded,\r\n        } = this.state;\r\n\r\n        this.setState({\r\n            is_media_expanded: !is_media_expanded,\r\n            is_comments_expanded: (is_media_expanded) ? false : is_comments_expanded,\r\n        });\r\n    }\r\n\r\n    onCommentsClick () {\r\n        const {\r\n            post,\r\n            fetchPost,\r\n        } = this.props;\r\n        const {\r\n            is_comments_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_comments_expanded) {\r\n            fetchPost(post);\r\n        }\r\n\r\n        this.setState({\r\n            is_comments_expanded: !is_comments_expanded,\r\n        });\r\n    }\r\n\r\n    renderMedia (post) {\r\n        const {\r\n            is_media_expanded,\r\n        } = this.state;\r\n\r\n        if (!is_media_expanded) return null;\r\n\r\n        console.log(post);\r\n\r\n        let component = null;\r\n        switch (post.type) {\r\n            case 'video':\r\n                component = <Video post={post} />;\r\n                break;\r\n            case 'image':\r\n                component = <Image post={post} />;\r\n                break;\r\n            case 'text':\r\n                component = <Text post={post} />;\r\n                break;\r\n            case 'link':\r\n                component = <Link post={post} />;\r\n                break;\r\n            case 'gallery':\r\n                component = <Gallery post={post} />;\r\n                break;\r\n            default:\r\n                component = null;\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className={classnames(styles.content_wrapper, {[styles.hide]: !is_media_expanded})}>\r\n                {component}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderComments (comments) {\r\n        const {\r\n            post\r\n        } = this.props;\r\n        const {\r\n            is_media_expanded,\r\n            is_comments_expanded\r\n        } = this.state;\r\n\r\n        if (is_media_expanded && !is_comments_expanded) {\r\n            return (\r\n                <div className={styles.comments_wrapper}>\r\n                    <div\r\n                        className={styles.load_comments}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                is_comments_expanded: !is_comments_expanded,\r\n                            });\r\n                            this.props.fetchPost(this.props.post);\r\n                        }}\r\n                    >LOAD COMMENTS</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!comments || !comments.length) return null;\r\n        return (\r\n            <div className={classnames(styles.comments_wrapper, {[styles.hide]: !is_comments_expanded})}>\r\n                <Comments comments={comments} post={post} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderIcon () {\r\n        const {\r\n            post,\r\n        } = this.props;\r\n\r\n        let fa_icon = ICON_MAP[post.type] || ICON_MAP.default;\r\n        // Show no icon for empty text posts\r\n        if (post.type === 'text' && post.empty) fa_icon = '';\r\n\r\n        return <i onClick={this.onClick} className={classnames(styles.icon, fa_icon)}></i>;\r\n    }\r\n\r\n    renderThumbnail () {\r\n        const {\r\n            subreddit = {},\r\n            post,\r\n        } = this.props;\r\n\r\n        let class_name = styles.thumbnail;\r\n        if (post.thumbnail || post.media.image) {\r\n            class_name = classnames(class_name, styles.thumbnail_image);\r\n        }\r\n\r\n        const icon = post.thumbnail || post.media.image || subreddit.icon\r\n        if (icon) {\r\n            if (icon === subreddit.icon) {\r\n                class_name = classnames(class_name, styles.thumbnail_subreddit);\r\n            }\r\n            return (\r\n                <div\r\n                    className={class_name}\r\n                    style={{ backgroundImage: `url(\"${icon}\")` }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return <i className={classnames(styles.thumbnail_icon, THUMBNAIL_ICON_MAP[post.type])} />;\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            post,\r\n            comments,\r\n            fetchPosts,\r\n        } = this.props;\r\n\r\n        if (!post) return;\r\n\r\n        const body_classname = classnames(styles.body, {\r\n            [styles.body_empty]: post.empty,\r\n        });\r\n\r\n        return (\r\n            <div className={styles.post}>\r\n                <div className={styles.bar}>\r\n                    <div className={styles.score}>{post.score_display}</div>\r\n                    {this.renderThumbnail()}\r\n                    <div className={body_classname}>\r\n                        <div className={styles.title}>{post.title}</div>\r\n                        {this.renderIcon()}\r\n                        <div className={styles.submission}>\r\n                            {`Submitted ${post.submitted_at} ago by ${post.author} to `}\r\n                            <span className={styles.subreddit_link} onClick={() => {\r\n                                fetchPosts({\r\n                                    title: post.subreddit,\r\n                                    type: 'subreddit',\r\n                                    name: post.subreddit,\r\n                                    url: `/r/${post.subreddit}`,\r\n                                });\r\n                            }}>{`/r/${post.subreddit}`}</span>\r\n                        </div>\r\n                        <div className={styles.comments} onClick={this.onCommentsClick}>{post.num_comments} comments</div>\r\n                    </div>\r\n                </div>\r\n                {this.renderMedia(post)}\r\n                {this.renderComments(comments.byID[post.id])}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPost,\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import { GET } from '../../lib/utils';\r\nimport {\r\n    cleanPost,\r\n    cleanComments\r\n } from '../../lib/post';\r\n\r\n /*\r\n    Fetching a full article requires the subreddit the article belongs to\r\n    and the\r\n\r\n    Sample URL: https://www.reddit.com/r/NintendoSwitch/comments/de98bj.json\r\n */\r\n\r\nexport const fetchPost = (article) => (dispatch) => {\r\n    const URL = `https://www.reddit.com/r/${article.subreddit}/comments/${article.id}.json`;\r\n    GET(URL, (response) => {\r\n        let [article_data, comment_data] = response;\r\n\r\n        let post = {\r\n            data: cleanPost(article_data),\r\n            comments: []\r\n        };\r\n\r\n        comment_data = comment_data.data.children;\r\n        comment_data.forEach((comment) => {\r\n            cleanComments(comment.data, post.comments, true);\r\n        });\r\n\r\n        return post;\r\n    }).then((action_data) => {\r\n        dispatch({\r\n            type: 'post',\r\n            payload: action_data\r\n        });\r\n    });\r\n}\r\n","import Post from './Post';\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\n\r\nimport Post from '../Post';\r\n\r\nimport styles from './Posts.module.css';\r\n\r\nclass Posts extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.onScroll = this.onScroll.bind(this);\r\n    }\r\n\r\n    onScroll (e) {\r\n        const {\r\n            posts,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            list = [],\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        const c = e.currentTarget;\r\n        const padding = 0;\r\n        if (Math.ceil(c.clientHeight + c.scrollTop + padding) >= Math.floor(c.scrollHeight)) {\r\n            console.log('END');\r\n            fetchPosts(subreddit, {\r\n                count: list.length,\r\n                after: list[list.length - 1].name,\r\n            });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const {\r\n            className,\r\n            posts,\r\n            subreddits_data,\r\n            fetchPosts,\r\n        } = this.props;\r\n        const {\r\n            list = [],\r\n            subreddit = {},\r\n        } = posts;\r\n\r\n        // TODO : need detection for end of subreddit\r\n\r\n        const subreddit_data = subreddits_data[subreddit.name] || {};\r\n\r\n        return (\r\n            <div className={classnames(styles.wrapper, className)} onScroll={this.onScroll}>\r\n                {list.map((post) => {\r\n                    if (!post || !post.id) return null;\r\n                    return <Post key={post.id} subreddit={subreddit_data} post={post} />\r\n                })}\r\n                {list.length && <div className={styles.load_more} onClick={() => {\r\n                    fetchPosts(subreddit, {\r\n                        count: list.length,\r\n                        after: list[list.length - 1].name,\r\n                    });\r\n                }}>LOAD MORE</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subreddits_data: state.subreddits.data,\r\n        posts: state.posts.current,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n","import Posts from './Posts';\r\n\r\nexport default Posts;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../../store/actions/postsAction';\r\nimport { setSubreddits } from '../../store/actions/subredditAction';\r\n\r\nimport Header from '../Header';\r\nimport SideMenu from '../SideMenu';\r\nimport Posts from '../Posts';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst INITIAL_LISTING = {\r\n    title: 'best',\r\n    type: 'listing',\r\n    url: 'best'\r\n};\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        let listing = INITIAL_LISTING;\r\n        try {\r\n            let previous_state = localStorage.getItem('saved_state');\r\n            previous_state = JSON.parse(previous_state);\r\n            listing = previous_state.current || INITIAL_LISTING;\r\n        } catch (e) {\r\n            console.log(e);\r\n            listing = INITIAL_LISTING;\r\n        }\r\n\r\n        this.props.fetchPosts(listing);\r\n\r\n        try {\r\n            let previous_state = localStorage.getItem('saved_state') || null;\r\n            previous_state = JSON.parse(previous_state);\r\n            this.props.setSubreddits(previous_state.subreddits);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <Header className={styles.header} />\r\n                <Posts className={styles.articleList} />\r\n                <SideMenu className={styles.sideMenu} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchPosts,\r\n    setSubreddits,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport configureStore from './store/store';\r\n\r\nimport './index.css';\r\n\r\nimport App from './modules/App';\r\n\r\nconst store = configureStore();\r\nstore.subscribe((e) => {\r\n    const current_state = store.getState();\r\n    const {\r\n        posts = {},\r\n        subreddits = {},\r\n    } = current_state;\r\n    const {\r\n        current = {},\r\n    } = posts;\r\n    const {\r\n        subscribed = [],\r\n        subscribed_map = {}\r\n    } = subreddits;\r\n\r\n    const serializedState = JSON.stringify({\r\n        current: current.subreddit || null,\r\n        subreddits: {\r\n            subscribed,\r\n            subscribed_map,\r\n        },\r\n    });\r\n    localStorage.setItem('saved_state', serializedState);\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// serviceWorker.register();\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}\r\n"],"sourceRoot":""}